/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { SoftheonSwitchboardContext } from "./softheonSwitchboardContext";

class SoftheonSwitchboard extends SoftheonSwitchboardContext {
  /**
   * @class
   * Initializes a new instance of the SoftheonSwitchboard class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(baseUri?: string, options?: msRest.ServiceClientOptions) {
    super(baseUri, options);
  }
  // methods on the client.

  /**
   * @summary Gets a board by the board id.
   *
   * @param {number} id The identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBoardById(id: number): Promise<Models.GetBoardByIdResponse>;
  getBoardById(id: number, options: msRest.RequestOptionsBase): Promise<Models.GetBoardByIdResponse>;
  getBoardById(id: number, callback: msRest.ServiceCallback<Models.BoardModel>): void;
  getBoardById(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BoardModel>): void;
  getBoardById(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BoardModel>): Promise<Models.GetBoardByIdResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getBoardByIdOperationSpec,
      callback) as Promise<Models.GetBoardByIdResponse>;
  }
  // methods on the client.

  /**
   * @summary Puts the specified model.
   *
   * @param {number} id The identifier.
   *
   * @param {SoftheonSwitchboardUpdateBoardOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateBoard(id: number): Promise<msRest.RestResponse>;
  updateBoard(id: number, options: Models.SoftheonSwitchboardUpdateBoardOptionalParams): Promise<msRest.RestResponse>;
  updateBoard(id: number, callback: msRest.ServiceCallback<void>): void;
  updateBoard(id: number, options: Models.SoftheonSwitchboardUpdateBoardOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateBoard(id: number, options?: Models.SoftheonSwitchboardUpdateBoardOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      updateBoardOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Deletes the specified identifier.
   *
   * @param {number} id The identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteBoard(id: number): Promise<msRest.RestResponse>;
  deleteBoard(id: number, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  deleteBoard(id: number, callback: msRest.ServiceCallback<void>): void;
  deleteBoard(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteBoard(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteBoardOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Gets all boards.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllBoards(): Promise<Models.GetAllBoardsResponse>;
  getAllBoards(options: msRest.RequestOptionsBase): Promise<Models.GetAllBoardsResponse>;
  getAllBoards(callback: msRest.ServiceCallback<Models.BoardModel[]>): void;
  getAllBoards(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BoardModel[]>): void;
  getAllBoards(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BoardModel[]>): Promise<Models.GetAllBoardsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllBoardsOperationSpec,
      callback) as Promise<Models.GetAllBoardsResponse>;
  }
  // methods on the client.

  /**
   * @summary Posts the specified model.
   *
   * @param {SoftheonSwitchboardCreateBoardOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createBoard(): Promise<Models.CreateBoardResponse>;
  createBoard(options: Models.SoftheonSwitchboardCreateBoardOptionalParams): Promise<Models.CreateBoardResponse>;
  createBoard(callback: msRest.ServiceCallback<Models.BoardModel>): void;
  createBoard(options: Models.SoftheonSwitchboardCreateBoardOptionalParams, callback: msRest.ServiceCallback<Models.BoardModel>): void;
  createBoard(options?: Models.SoftheonSwitchboardCreateBoardOptionalParams, callback?: msRest.ServiceCallback<Models.BoardModel>): Promise<Models.CreateBoardResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createBoardOperationSpec,
      callback) as Promise<Models.CreateBoardResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets all board history for account.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllBoardHistoryForTheAccount(): Promise<Models.GetAllBoardHistoryForTheAccountResponse>;
  getAllBoardHistoryForTheAccount(options: msRest.RequestOptionsBase): Promise<Models.GetAllBoardHistoryForTheAccountResponse>;
  getAllBoardHistoryForTheAccount(callback: msRest.ServiceCallback<Models.BoardHistoryModel[]>): void;
  getAllBoardHistoryForTheAccount(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BoardHistoryModel[]>): void;
  getAllBoardHistoryForTheAccount(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BoardHistoryModel[]>): Promise<Models.GetAllBoardHistoryForTheAccountResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllBoardHistoryForTheAccountOperationSpec,
      callback) as Promise<Models.GetAllBoardHistoryForTheAccountResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets the board history.
   *
   * @param {number} id The identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBoardHistoryById(id: number): Promise<Models.GetBoardHistoryByIdResponse>;
  getBoardHistoryById(id: number, options: msRest.RequestOptionsBase): Promise<Models.GetBoardHistoryByIdResponse>;
  getBoardHistoryById(id: number, callback: msRest.ServiceCallback<Models.BoardHistoryModel>): void;
  getBoardHistoryById(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BoardHistoryModel>): void;
  getBoardHistoryById(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BoardHistoryModel>): Promise<Models.GetBoardHistoryByIdResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getBoardHistoryByIdOperationSpec,
      callback) as Promise<Models.GetBoardHistoryByIdResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets the boards by filter.
   *
   * @param {SoftheonSwitchboardGetBoardsByFilterOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBoardsByFilter(): Promise<Models.GetBoardsByFilterResponse>;
  getBoardsByFilter(options: Models.SoftheonSwitchboardGetBoardsByFilterOptionalParams): Promise<Models.GetBoardsByFilterResponse>;
  getBoardsByFilter(callback: msRest.ServiceCallback<Models.BoardModel[]>): void;
  getBoardsByFilter(options: Models.SoftheonSwitchboardGetBoardsByFilterOptionalParams, callback: msRest.ServiceCallback<Models.BoardModel[]>): void;
  getBoardsByFilter(options?: Models.SoftheonSwitchboardGetBoardsByFilterOptionalParams, callback?: msRest.ServiceCallback<Models.BoardModel[]>): Promise<Models.GetBoardsByFilterResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBoardsByFilterOperationSpec,
      callback) as Promise<Models.GetBoardsByFilterResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets all switches associated with a specific board Id.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchesByBoardId(boardId: number): Promise<Models.GetSwitchesByBoardIdResponse>;
  getSwitchesByBoardId(boardId: number, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchesByBoardIdResponse>;
  getSwitchesByBoardId(boardId: number, callback: msRest.ServiceCallback<Models.SwitchModel[]>): void;
  getSwitchesByBoardId(boardId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchModel[]>): void;
  getSwitchesByBoardId(boardId: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchModel[]>): Promise<Models.GetSwitchesByBoardIdResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        options
      },
      getSwitchesByBoardIdOperationSpec,
      callback) as Promise<Models.GetSwitchesByBoardIdResponse>;
  }
  // methods on the client.

  /**
   * @summary Creates a new switch.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {SoftheonSwitchboardCreateSwitchOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createSwitch(boardId: number): Promise<Models.CreateSwitchResponse>;
  createSwitch(boardId: number, options: Models.SoftheonSwitchboardCreateSwitchOptionalParams): Promise<Models.CreateSwitchResponse>;
  createSwitch(boardId: number, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  createSwitch(boardId: number, options: Models.SoftheonSwitchboardCreateSwitchOptionalParams, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  createSwitch(boardId: number, options?: Models.SoftheonSwitchboardCreateSwitchOptionalParams, callback?: msRest.ServiceCallback<Models.SwitchModel>): Promise<Models.CreateSwitchResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        options
      },
      createSwitchOperationSpec,
      callback) as Promise<Models.CreateSwitchResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets a specific switch by the switch Id.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitch(id: number, boardId: string): Promise<Models.GetSwitchResponse>;
  getSwitch(id: number, boardId: string, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchResponse>;
  getSwitch(id: number, boardId: string, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitch(id: number, boardId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitch(id: number, boardId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchModel>): Promise<Models.GetSwitchResponse> {
    return this.sendOperationRequest(
      {
        id,
        boardId,
        options
      },
      getSwitchOperationSpec,
      callback) as Promise<Models.GetSwitchResponse>;
  }
  // methods on the client.

  /**
   * @summary Updates the switch and places the old version in the history table.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {SoftheonSwitchboardUpdateSwitchOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateSwitch(id: number, boardId: string): Promise<msRest.RestResponse>;
  updateSwitch(id: number, boardId: string, options: Models.SoftheonSwitchboardUpdateSwitchOptionalParams): Promise<msRest.RestResponse>;
  updateSwitch(id: number, boardId: string, callback: msRest.ServiceCallback<void>): void;
  updateSwitch(id: number, boardId: string, options: Models.SoftheonSwitchboardUpdateSwitchOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateSwitch(id: number, boardId: string, options?: Models.SoftheonSwitchboardUpdateSwitchOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        boardId,
        options
      },
      updateSwitchOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Deletes a switch and place it in the history table.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteSwitchVersion(id: number, boardId: string): Promise<msRest.RestResponse>;
  deleteSwitchVersion(id: number, boardId: string, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  deleteSwitchVersion(id: number, boardId: string, callback: msRest.ServiceCallback<void>): void;
  deleteSwitchVersion(id: number, boardId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSwitchVersion(id: number, boardId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        boardId,
        options
      },
      deleteSwitchVersionOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Gets a specific previous switch version.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchHistory(id: number, boardId: string): Promise<Models.GetSwitchHistoryResponse>;
  getSwitchHistory(id: number, boardId: string, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchHistoryResponse>;
  getSwitchHistory(id: number, boardId: string, callback: msRest.ServiceCallback<Models.SwitchHistoryModel>): void;
  getSwitchHistory(id: number, boardId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchHistoryModel>): void;
  getSwitchHistory(id: number, boardId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchHistoryModel>): Promise<Models.GetSwitchHistoryResponse> {
    return this.sendOperationRequest(
      {
        id,
        boardId,
        options
      },
      getSwitchHistoryOperationSpec,
      callback) as Promise<Models.GetSwitchHistoryResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets all of the previous switches for a board.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllSwitchHistoryByBoard(boardId: number): Promise<Models.GetAllSwitchHistoryByBoardResponse>;
  getAllSwitchHistoryByBoard(boardId: number, options: msRest.RequestOptionsBase): Promise<Models.GetAllSwitchHistoryByBoardResponse>;
  getAllSwitchHistoryByBoard(boardId: number, callback: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): void;
  getAllSwitchHistoryByBoard(boardId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): void;
  getAllSwitchHistoryByBoard(boardId: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): Promise<Models.GetAllSwitchHistoryByBoardResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        options
      },
      getAllSwitchHistoryByBoardOperationSpec,
      callback) as Promise<Models.GetAllSwitchHistoryByBoardResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets all of the previous switches for a switch.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {string} boardId
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllSwitchHistoryBySwitch(switchId: number, boardId: string): Promise<Models.GetAllSwitchHistoryBySwitchResponse>;
  getAllSwitchHistoryBySwitch(switchId: number, boardId: string, options: msRest.RequestOptionsBase): Promise<Models.GetAllSwitchHistoryBySwitchResponse>;
  getAllSwitchHistoryBySwitch(switchId: number, boardId: string, callback: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): void;
  getAllSwitchHistoryBySwitch(switchId: number, boardId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): void;
  getAllSwitchHistoryBySwitch(switchId: number, boardId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): Promise<Models.GetAllSwitchHistoryBySwitchResponse> {
    return this.sendOperationRequest(
      {
        switchId,
        boardId,
        options
      },
      getAllSwitchHistoryBySwitchOperationSpec,
      callback) as Promise<Models.GetAllSwitchHistoryBySwitchResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets the users by filter.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {SoftheonSwitchboardGetSwitchesByFilterOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchesByFilter(boardId: number): Promise<Models.GetSwitchesByFilterResponse>;
  getSwitchesByFilter(boardId: number, options: Models.SoftheonSwitchboardGetSwitchesByFilterOptionalParams): Promise<Models.GetSwitchesByFilterResponse>;
  getSwitchesByFilter(boardId: number, callback: msRest.ServiceCallback<Models.SwitchModel[]>): void;
  getSwitchesByFilter(boardId: number, options: Models.SoftheonSwitchboardGetSwitchesByFilterOptionalParams, callback: msRest.ServiceCallback<Models.SwitchModel[]>): void;
  getSwitchesByFilter(boardId: number, options?: Models.SoftheonSwitchboardGetSwitchesByFilterOptionalParams, callback?: msRest.ServiceCallback<Models.SwitchModel[]>): Promise<Models.GetSwitchesByFilterResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        options
      },
      getSwitchesByFilterOperationSpec,
      callback) as Promise<Models.GetSwitchesByFilterResponse>;
  }
  // methods on the client.

  /**
   * @summary Rollback to a previous switch.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {number} switchHistoryId The switch history identifier.
   *
   * @param {string} boardId
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  rollbackSwitch(switchId: number, switchHistoryId: number, boardId: string): Promise<msRest.RestResponse>;
  rollbackSwitch(switchId: number, switchHistoryId: number, boardId: string, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  rollbackSwitch(switchId: number, switchHistoryId: number, boardId: string, callback: msRest.ServiceCallback<void>): void;
  rollbackSwitch(switchId: number, switchHistoryId: number, boardId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  rollbackSwitch(switchId: number, switchHistoryId: number, boardId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        switchId,
        switchHistoryId,
        boardId,
        options
      },
      rollbackSwitchOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getBoardByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BoardModel
    },
    400: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const updateBoardOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/Board/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "model"
    ],
    mapper: Mappers.BoardPutModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    204: {},
    400: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteBoardOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/Board/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {},
    400: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getAllBoardsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoardModel"
            }
          }
        }
      }
    },
    400: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createBoardOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/Board",
  requestBody: {
    parameterPath: [
      "options",
      "model"
    ],
    mapper: Mappers.BoardPostModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.BoardModel
    },
    400: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getAllBoardHistoryForTheAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/History",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoardHistoryModel"
            }
          }
        }
      }
    },
    400: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getBoardHistoryByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/History/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BoardHistoryModel
    },
    400: {},
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getBoardsByFilterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/Board/search",
  requestBody: {
    parameterPath: [
      "options",
      "model"
    ],
    mapper: Mappers.BoardFilterModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoardModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getSwitchesByBoardIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/{boardId}/Switch",
  urlParameters: [
    Parameters.boardId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const createSwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/Board/{boardId}/Switch",
  urlParameters: [
    Parameters.boardId0
  ],
  requestBody: {
    parameterPath: [
      "options",
      "switchPostModel"
    ],
    mapper: Mappers.SwitchPostModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.SwitchModel
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getSwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/{boardId}/Switch/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.boardId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SwitchModel
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const updateSwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/Board/{boardId}/Switch/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.boardId1
  ],
  requestBody: {
    parameterPath: [
      "options",
      "switchPutModel"
    ],
    mapper: Mappers.SwitchPutModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    204: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteSwitchVersionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/Board/{boardId}/Switch/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.boardId1
  ],
  responses: {
    204: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getSwitchHistoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/{boardId}/Switch/History/{id}",
  urlParameters: [
    Parameters.id,
    Parameters.boardId1
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SwitchHistoryModel
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getAllSwitchHistoryByBoardOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/{boardId}/Switch/History",
  urlParameters: [
    Parameters.boardId0
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchHistoryModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getAllSwitchHistoryBySwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/{boardId}/Switch/{switchId}/History",
  urlParameters: [
    Parameters.switchId,
    Parameters.boardId1
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchHistoryModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getSwitchesByFilterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/Board/{boardId}/Switch/search",
  urlParameters: [
    Parameters.boardId0
  ],
  requestBody: {
    parameterPath: [
      "options",
      "model"
    ],
    mapper: Mappers.SwitchFilterModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const rollbackSwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/Board/{boardId}/Switch/{switchId}/history/{switchHistoryId}",
  urlParameters: [
    Parameters.switchId,
    Parameters.switchHistoryId,
    Parameters.boardId1
  ],
  responses: {
    204: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

export {
  SoftheonSwitchboard,
  SoftheonSwitchboardContext,
  Models as SoftheonSwitchboardModels,
  Mappers as SoftheonSwitchboardMappers
};
