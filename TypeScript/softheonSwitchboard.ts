/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { SoftheonSwitchboardContext } from "./softheonSwitchboardContext";

class SoftheonSwitchboard extends SoftheonSwitchboardContext {
  /**
   * @class
   * Initializes a new instance of the SoftheonSwitchboard class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - The request options. Detailed info can be found at
   * {@link https://github.github.io/fetch/#Request Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(credentials: msRest.ServiceClientCredentials, baseUri?: string, options?: msRest.ServiceClientOptions) {
    super(credentials, baseUri, options);
  }
  // methods on the client.

  /**
   * @summary Gets this instance.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAuthDetails(): Promise<Models.GetAuthDetailsResponse>;
  getAuthDetails(options: msRest.RequestOptionsBase): Promise<Models.GetAuthDetailsResponse>;
  getAuthDetails(callback: msRest.ServiceCallback<string>): void;
  getAuthDetails(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getAuthDetails(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): Promise<Models.GetAuthDetailsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAuthDetailsOperationSpec,
      callback) as Promise<Models.GetAuthDetailsResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets a board by the board id.
   *
   * @param {number} id The identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBoardById(id: number): Promise<Models.GetBoardByIdResponse>;
  getBoardById(id: number, options: msRest.RequestOptionsBase): Promise<Models.GetBoardByIdResponse>;
  getBoardById(id: number, callback: msRest.ServiceCallback<Models.BoardModel>): void;
  getBoardById(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BoardModel>): void;
  getBoardById(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BoardModel>): Promise<Models.GetBoardByIdResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getBoardByIdOperationSpec,
      callback) as Promise<Models.GetBoardByIdResponse>;
  }
  // methods on the client.

  /**
   * @summary Puts the specified model.
   *
   * @param {number} id The identifier.
   *
   * @param {SoftheonSwitchboardUpdateBoardOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateBoard(id: number): Promise<msRest.RestResponse>;
  updateBoard(id: number, options: Models.SoftheonSwitchboardUpdateBoardOptionalParams): Promise<msRest.RestResponse>;
  updateBoard(id: number, callback: msRest.ServiceCallback<void>): void;
  updateBoard(id: number, options: Models.SoftheonSwitchboardUpdateBoardOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateBoard(id: number, options?: Models.SoftheonSwitchboardUpdateBoardOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      updateBoardOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Deletes the specified identifier.
   *
   * @param {number} id The identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteBoard(id: number): Promise<msRest.RestResponse>;
  deleteBoard(id: number, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  deleteBoard(id: number, callback: msRest.ServiceCallback<void>): void;
  deleteBoard(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteBoard(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteBoardOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Gets a board by name.
   *
   * @param {string} boardName Name of the board.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBoardByName(boardName: string): Promise<Models.GetBoardByNameResponse>;
  getBoardByName(boardName: string, options: msRest.RequestOptionsBase): Promise<Models.GetBoardByNameResponse>;
  getBoardByName(boardName: string, callback: msRest.ServiceCallback<Models.BoardModel>): void;
  getBoardByName(boardName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BoardModel>): void;
  getBoardByName(boardName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BoardModel>): Promise<Models.GetBoardByNameResponse> {
    return this.sendOperationRequest(
      {
        boardName,
        options
      },
      getBoardByNameOperationSpec,
      callback) as Promise<Models.GetBoardByNameResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets all boards.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllBoards(): Promise<Models.GetAllBoardsResponse>;
  getAllBoards(options: msRest.RequestOptionsBase): Promise<Models.GetAllBoardsResponse>;
  getAllBoards(callback: msRest.ServiceCallback<Models.BoardModel[]>): void;
  getAllBoards(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BoardModel[]>): void;
  getAllBoards(options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.BoardModel[]>): Promise<Models.GetAllBoardsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getAllBoardsOperationSpec,
      callback) as Promise<Models.GetAllBoardsResponse>;
  }
  // methods on the client.

  /**
   * @summary Posts the specified model.
   *
   * @param {SoftheonSwitchboardCreateBoardOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createBoard(): Promise<Models.CreateBoardResponse>;
  createBoard(options: Models.SoftheonSwitchboardCreateBoardOptionalParams): Promise<Models.CreateBoardResponse>;
  createBoard(callback: msRest.ServiceCallback<Models.BoardModel>): void;
  createBoard(options: Models.SoftheonSwitchboardCreateBoardOptionalParams, callback: msRest.ServiceCallback<Models.BoardModel>): void;
  createBoard(options?: Models.SoftheonSwitchboardCreateBoardOptionalParams, callback?: msRest.ServiceCallback<Models.BoardModel>): Promise<Models.CreateBoardResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      createBoardOperationSpec,
      callback) as Promise<Models.CreateBoardResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets the boards by filter.
   *
   * @param {SoftheonSwitchboardGetBoardsByFilterOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getBoardsByFilter(): Promise<Models.GetBoardsByFilterResponse>;
  getBoardsByFilter(options: Models.SoftheonSwitchboardGetBoardsByFilterOptionalParams): Promise<Models.GetBoardsByFilterResponse>;
  getBoardsByFilter(callback: msRest.ServiceCallback<Models.BoardModel[]>): void;
  getBoardsByFilter(options: Models.SoftheonSwitchboardGetBoardsByFilterOptionalParams, callback: msRest.ServiceCallback<Models.BoardModel[]>): void;
  getBoardsByFilter(options?: Models.SoftheonSwitchboardGetBoardsByFilterOptionalParams, callback?: msRest.ServiceCallback<Models.BoardModel[]>): Promise<Models.GetBoardsByFilterResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getBoardsByFilterOperationSpec,
      callback) as Promise<Models.GetBoardsByFilterResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets all switches associated with a specific board Id.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchesByBoardId(boardId: number): Promise<Models.GetSwitchesByBoardIdResponse>;
  getSwitchesByBoardId(boardId: number, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchesByBoardIdResponse>;
  getSwitchesByBoardId(boardId: number, callback: msRest.ServiceCallback<Models.SwitchModel[]>): void;
  getSwitchesByBoardId(boardId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchModel[]>): void;
  getSwitchesByBoardId(boardId: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchModel[]>): Promise<Models.GetSwitchesByBoardIdResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        options
      },
      getSwitchesByBoardIdOperationSpec,
      callback) as Promise<Models.GetSwitchesByBoardIdResponse>;
  }
  // methods on the client.

  /**
   * @summary Creates a new switch.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {SoftheonSwitchboardCreateSwitchOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  createSwitch(boardId: number): Promise<Models.CreateSwitchResponse>;
  createSwitch(boardId: number, options: Models.SoftheonSwitchboardCreateSwitchOptionalParams): Promise<Models.CreateSwitchResponse>;
  createSwitch(boardId: number, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  createSwitch(boardId: number, options: Models.SoftheonSwitchboardCreateSwitchOptionalParams, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  createSwitch(boardId: number, options?: Models.SoftheonSwitchboardCreateSwitchOptionalParams, callback?: msRest.ServiceCallback<Models.SwitchModel>): Promise<Models.CreateSwitchResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        options
      },
      createSwitchOperationSpec,
      callback) as Promise<Models.CreateSwitchResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets a specific switch by the switch Id.
   *
   * @param {number} id The identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchById(id: number): Promise<Models.GetSwitchByIdResponse>;
  getSwitchById(id: number, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchByIdResponse>;
  getSwitchById(id: number, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitchById(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitchById(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchModel>): Promise<Models.GetSwitchByIdResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getSwitchByIdOperationSpec,
      callback) as Promise<Models.GetSwitchByIdResponse>;
  }
  // methods on the client.

  /**
   * @summary Updates the switch and places the old version in the history table.
   *
   * @param {number} id The identifier.
   *
   * @param {SoftheonSwitchboardUpdateSwitchOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  updateSwitch(id: number): Promise<msRest.RestResponse>;
  updateSwitch(id: number, options: Models.SoftheonSwitchboardUpdateSwitchOptionalParams): Promise<msRest.RestResponse>;
  updateSwitch(id: number, callback: msRest.ServiceCallback<void>): void;
  updateSwitch(id: number, options: Models.SoftheonSwitchboardUpdateSwitchOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateSwitch(id: number, options?: Models.SoftheonSwitchboardUpdateSwitchOptionalParams, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      updateSwitchOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Deletes a switch and place it in the history table.
   *
   * @param {number} id The identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  deleteSwitchVersion(id: number): Promise<msRest.RestResponse>;
  deleteSwitchVersion(id: number, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  deleteSwitchVersion(id: number, callback: msRest.ServiceCallback<void>): void;
  deleteSwitchVersion(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteSwitchVersion(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      deleteSwitchVersionOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Gets the specific switch according to board and switch name.
   *
   * @param {number} boardId Name of the board.
   *
   * @param {string} switchName Name of the switch.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchBySwitchName(boardId: number, switchName: string): Promise<Models.GetSwitchBySwitchNameResponse>;
  getSwitchBySwitchName(boardId: number, switchName: string, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchBySwitchNameResponse>;
  getSwitchBySwitchName(boardId: number, switchName: string, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitchBySwitchName(boardId: number, switchName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitchBySwitchName(boardId: number, switchName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchModel>): Promise<Models.GetSwitchBySwitchNameResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        switchName,
        options
      },
      getSwitchBySwitchNameOperationSpec,
      callback) as Promise<Models.GetSwitchBySwitchNameResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets the specified board name.
   *
   * @param {string} boardName Name of the board.
   *
   * @param {string} switchName Name of the switch.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchByBoardName(boardName: string, switchName: string): Promise<Models.GetSwitchByBoardNameResponse>;
  getSwitchByBoardName(boardName: string, switchName: string, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchByBoardNameResponse>;
  getSwitchByBoardName(boardName: string, switchName: string, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitchByBoardName(boardName: string, switchName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitchByBoardName(boardName: string, switchName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchModel>): Promise<Models.GetSwitchByBoardNameResponse> {
    return this.sendOperationRequest(
      {
        boardName,
        switchName,
        options
      },
      getSwitchByBoardNameOperationSpec,
      callback) as Promise<Models.GetSwitchByBoardNameResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets all of the previous switches for a switch.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {string} pageSize
   *
   * @param {SoftheonSwitchboardGetAllSwitchHistoryBySwitchOptionalParams} [options] Optional
   * Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAllSwitchHistoryBySwitch(switchId: number, pageSize: string): Promise<Models.GetAllSwitchHistoryBySwitchResponse>;
  getAllSwitchHistoryBySwitch(switchId: number, pageSize: string, options: Models.SoftheonSwitchboardGetAllSwitchHistoryBySwitchOptionalParams): Promise<Models.GetAllSwitchHistoryBySwitchResponse>;
  getAllSwitchHistoryBySwitch(switchId: number, pageSize: string, callback: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): void;
  getAllSwitchHistoryBySwitch(switchId: number, pageSize: string, options: Models.SoftheonSwitchboardGetAllSwitchHistoryBySwitchOptionalParams, callback: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): void;
  getAllSwitchHistoryBySwitch(switchId: number, pageSize: string, options?: Models.SoftheonSwitchboardGetAllSwitchHistoryBySwitchOptionalParams, callback?: msRest.ServiceCallback<Models.SwitchHistoryModel[]>): Promise<Models.GetAllSwitchHistoryBySwitchResponse> {
    return this.sendOperationRequest(
      {
        switchId,
        pageSize,
        options
      },
      getAllSwitchHistoryBySwitchOperationSpec,
      callback) as Promise<Models.GetAllSwitchHistoryBySwitchResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets the switch version.
   *
   * @param {number} id The identifier.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchVersionById(id: number): Promise<Models.GetSwitchVersionByIdResponse>;
  getSwitchVersionById(id: number, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchVersionByIdResponse>;
  getSwitchVersionById(id: number, callback: msRest.ServiceCallback<string>): void;
  getSwitchVersionById(id: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getSwitchVersionById(id: number, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): Promise<Models.GetSwitchVersionByIdResponse> {
    return this.sendOperationRequest(
      {
        id,
        options
      },
      getSwitchVersionByIdOperationSpec,
      callback) as Promise<Models.GetSwitchVersionByIdResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets the switch version.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {string} switchName Name of the switch.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchVersionByName(boardId: number, switchName: string): Promise<Models.GetSwitchVersionByNameResponse>;
  getSwitchVersionByName(boardId: number, switchName: string, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchVersionByNameResponse>;
  getSwitchVersionByName(boardId: number, switchName: string, callback: msRest.ServiceCallback<string>): void;
  getSwitchVersionByName(boardId: number, switchName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<string>): void;
  getSwitchVersionByName(boardId: number, switchName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<string>): Promise<Models.GetSwitchVersionByNameResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        switchName,
        options
      },
      getSwitchVersionByNameOperationSpec,
      callback) as Promise<Models.GetSwitchVersionByNameResponse>;
  }
  // methods on the client.

  /**
   * @summary Gets the switch by version.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {string} versionNumber The version number.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchByVersion(switchId: number, versionNumber: string): Promise<Models.GetSwitchByVersionResponse>;
  getSwitchByVersion(switchId: number, versionNumber: string, options: msRest.RequestOptionsBase): Promise<Models.GetSwitchByVersionResponse>;
  getSwitchByVersion(switchId: number, versionNumber: string, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitchByVersion(switchId: number, versionNumber: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SwitchModel>): void;
  getSwitchByVersion(switchId: number, versionNumber: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.SwitchModel>): Promise<Models.GetSwitchByVersionResponse> {
    return this.sendOperationRequest(
      {
        switchId,
        versionNumber,
        options
      },
      getSwitchByVersionOperationSpec,
      callback) as Promise<Models.GetSwitchByVersionResponse>;
  }
  // methods on the client.

  /**
   * @summary Rollbacks to previous version.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {string} versionNumber The version number to rollback to.
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  rollbackSwitch(switchId: number, versionNumber: string): Promise<msRest.RestResponse>;
  rollbackSwitch(switchId: number, versionNumber: string, options: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  rollbackSwitch(switchId: number, versionNumber: string, callback: msRest.ServiceCallback<void>): void;
  rollbackSwitch(switchId: number, versionNumber: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  rollbackSwitch(switchId: number, versionNumber: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        switchId,
        versionNumber,
        options
      },
      rollbackSwitchOperationSpec,
      callback);
  }
  // methods on the client.

  /**
   * @summary Gets switches by filter.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {SoftheonSwitchboardGetSwitchesByFilterOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getSwitchesByFilter(boardId: number): Promise<Models.GetSwitchesByFilterResponse>;
  getSwitchesByFilter(boardId: number, options: Models.SoftheonSwitchboardGetSwitchesByFilterOptionalParams): Promise<Models.GetSwitchesByFilterResponse>;
  getSwitchesByFilter(boardId: number, callback: msRest.ServiceCallback<Models.SwitchModel[]>): void;
  getSwitchesByFilter(boardId: number, options: Models.SoftheonSwitchboardGetSwitchesByFilterOptionalParams, callback: msRest.ServiceCallback<Models.SwitchModel[]>): void;
  getSwitchesByFilter(boardId: number, options?: Models.SoftheonSwitchboardGetSwitchesByFilterOptionalParams, callback?: msRest.ServiceCallback<Models.SwitchModel[]>): Promise<Models.GetSwitchesByFilterResponse> {
    return this.sendOperationRequest(
      {
        boardId,
        options
      },
      getSwitchesByFilterOperationSpec,
      callback) as Promise<Models.GetSwitchesByFilterResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAuthDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/AuthDetails",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    default: {}
  },
  serializer
};

const getBoardByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BoardModel
    },
    400: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const updateBoardOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/Board/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "model"
    ],
    mapper: Mappers.BoardPutModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    204: {},
    400: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteBoardOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/Board/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {},
    400: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getBoardByNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board/name/{boardName}",
  urlParameters: [
    Parameters.boardName
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BoardModel
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getAllBoardsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/Board",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoardModel"
            }
          }
        }
      }
    },
    400: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const createBoardOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/Board",
  requestBody: {
    parameterPath: [
      "options",
      "model"
    ],
    mapper: Mappers.BoardPostModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.BoardModel
    },
    400: {},
    401: {},
    403: {},
    409: {},
    default: {}
  },
  serializer
};

const getBoardsByFilterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/Board/search",
  requestBody: {
    parameterPath: [
      "options",
      "filterModel"
    ],
    mapper: Mappers.BoardFilterModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoardModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getSwitchesByBoardIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/board/{boardId}/switch",
  urlParameters: [
    Parameters.boardId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const createSwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/board/{boardId}/switch",
  urlParameters: [
    Parameters.boardId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "switchPostModel"
    ],
    mapper: Mappers.SwitchPostModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    201: {
      bodyMapper: Mappers.SwitchModel
    },
    401: {},
    403: {},
    409: {},
    default: {}
  },
  serializer
};

const getSwitchByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/switch/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SwitchModel
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const updateSwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/switch/{id}",
  urlParameters: [
    Parameters.id
  ],
  requestBody: {
    parameterPath: [
      "options",
      "switchPutModel"
    ],
    mapper: Mappers.SwitchPutModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    204: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const deleteSwitchVersionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "v1/switch/{id}",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    204: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getSwitchBySwitchNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/board/{boardId}/switch/{switchName}",
  urlParameters: [
    Parameters.boardId,
    Parameters.switchName
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SwitchModel
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getSwitchByBoardNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/board/name/{boardName}/switch/{switchName}",
  urlParameters: [
    Parameters.boardName,
    Parameters.switchName
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SwitchModel
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getAllSwitchHistoryBySwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/switch/{switchId}/switchhistory/{pageNumber}/{pageSize}",
  urlParameters: [
    Parameters.switchId,
    Parameters.pageSize
  ],
  queryParameters: [
    Parameters.pageNumber,
    Parameters.pageSizeChoice
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchHistoryModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

const getSwitchVersionByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/switch/{id}/version",
  urlParameters: [
    Parameters.id
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getSwitchVersionByNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/board/{boardId}/switch/{switchName}/version",
  urlParameters: [
    Parameters.boardId,
    Parameters.switchName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "String"
        }
      }
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getSwitchByVersionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v1/switch/{switchId}/version/{versionNumber}",
  urlParameters: [
    Parameters.switchId,
    Parameters.versionNumber
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SwitchModel
    },
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const rollbackSwitchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "v1/switch/{switchId}/version/{versionNumber}",
  urlParameters: [
    Parameters.switchId,
    Parameters.versionNumber
  ],
  responses: {
    204: {},
    401: {},
    403: {},
    404: {},
    default: {}
  },
  serializer
};

const getSwitchesByFilterOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "v1/board/{boardId}/switch/search",
  urlParameters: [
    Parameters.boardId
  ],
  requestBody: {
    parameterPath: [
      "options",
      "model"
    ],
    mapper: Mappers.SwitchFilterModel
  },
  contentType: "application/json-patch+json; charset=utf-8",
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SwitchModel"
            }
          }
        }
      }
    },
    401: {},
    403: {},
    default: {}
  },
  serializer
};

export {
  SoftheonSwitchboard,
  SoftheonSwitchboardContext,
  Models as SoftheonSwitchboardModels,
  Mappers as SoftheonSwitchboardMappers
};
