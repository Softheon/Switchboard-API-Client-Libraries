/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package swagger;

import .models.BoardFilterModel;
import .models.BoardHistoryModel;
import .models.BoardModel;
import .models.BoardPostModel;
import .models.BoardPutModel;
import .models.SwitchFilterModel;
import .models.SwitchHistoryModel;
import .models.SwitchModel;
import .models.SwitchPostModel;
import .models.SwitchPutModel;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for SoftheonSwitchboard class.
 */
public interface SoftheonSwitchboard {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https://";

    /**
     * Gets a board by the board id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BoardModel object if successful.
     */
    BoardModel getBoardById(int id);

    /**
     * Gets a board by the board id.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BoardModel> getBoardByIdAsync(int id, final ServiceCallback<BoardModel> serviceCallback);

    /**
     * Gets a board by the board id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    Observable<BoardModel> getBoardByIdAsync(int id);

    /**
     * Gets a board by the board id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    Observable<ServiceResponse<BoardModel>> getBoardByIdWithServiceResponseAsync(int id);

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateBoard(int id);

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateBoardAsync(int id, final ServiceCallback<Void> serviceCallback);

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateBoardAsync(int id);

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateBoardWithServiceResponseAsync(int id);
    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateBoard(int id, BoardPutModel model);

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateBoardAsync(int id, BoardPutModel model, final ServiceCallback<Void> serviceCallback);

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateBoardAsync(int id, BoardPutModel model);

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateBoardWithServiceResponseAsync(int id, BoardPutModel model);

    /**
     * Deletes the specified identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteBoard(int id);

    /**
     * Deletes the specified identifier.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteBoardAsync(int id, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes the specified identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteBoardAsync(int id);

    /**
     * Deletes the specified identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteBoardWithServiceResponseAsync(int id);

    /**
     * Gets all boards.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BoardModel&gt; object if successful.
     */
    List<BoardModel> getAllBoards();

    /**
     * Gets all boards.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<BoardModel>> getAllBoardsAsync(final ServiceCallback<List<BoardModel>> serviceCallback);

    /**
     * Gets all boards.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    Observable<List<BoardModel>> getAllBoardsAsync();

    /**
     * Gets all boards.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    Observable<ServiceResponse<List<BoardModel>>> getAllBoardsWithServiceResponseAsync();

    /**
     * Posts the specified model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BoardModel object if successful.
     */
    BoardModel createBoard();

    /**
     * Posts the specified model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BoardModel> createBoardAsync(final ServiceCallback<BoardModel> serviceCallback);

    /**
     * Posts the specified model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    Observable<BoardModel> createBoardAsync();

    /**
     * Posts the specified model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    Observable<ServiceResponse<BoardModel>> createBoardWithServiceResponseAsync();
    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BoardModel object if successful.
     */
    BoardModel createBoard(BoardPostModel model);

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BoardModel> createBoardAsync(BoardPostModel model, final ServiceCallback<BoardModel> serviceCallback);

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    Observable<BoardModel> createBoardAsync(BoardPostModel model);

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    Observable<ServiceResponse<BoardModel>> createBoardWithServiceResponseAsync(BoardPostModel model);

    /**
     * Gets all board history for account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BoardHistoryModel&gt; object if successful.
     */
    List<BoardHistoryModel> getAllBoardHistoryForTheAccount();

    /**
     * Gets all board history for account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<BoardHistoryModel>> getAllBoardHistoryForTheAccountAsync(final ServiceCallback<List<BoardHistoryModel>> serviceCallback);

    /**
     * Gets all board history for account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardHistoryModel&gt; object
     */
    Observable<List<BoardHistoryModel>> getAllBoardHistoryForTheAccountAsync();

    /**
     * Gets all board history for account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardHistoryModel&gt; object
     */
    Observable<ServiceResponse<List<BoardHistoryModel>>> getAllBoardHistoryForTheAccountWithServiceResponseAsync();

    /**
     * Gets the board history.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BoardHistoryModel object if successful.
     */
    BoardHistoryModel getBoardHistoryById(int id);

    /**
     * Gets the board history.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<BoardHistoryModel> getBoardHistoryByIdAsync(int id, final ServiceCallback<BoardHistoryModel> serviceCallback);

    /**
     * Gets the board history.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardHistoryModel object
     */
    Observable<BoardHistoryModel> getBoardHistoryByIdAsync(int id);

    /**
     * Gets the board history.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardHistoryModel object
     */
    Observable<ServiceResponse<BoardHistoryModel>> getBoardHistoryByIdWithServiceResponseAsync(int id);

    /**
     * Gets the boards by filter.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BoardModel&gt; object if successful.
     */
    List<BoardModel> getBoardsByFilter();

    /**
     * Gets the boards by filter.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<BoardModel>> getBoardsByFilterAsync(final ServiceCallback<List<BoardModel>> serviceCallback);

    /**
     * Gets the boards by filter.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    Observable<List<BoardModel>> getBoardsByFilterAsync();

    /**
     * Gets the boards by filter.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    Observable<ServiceResponse<List<BoardModel>>> getBoardsByFilterWithServiceResponseAsync();
    /**
     * Gets the boards by filter.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BoardModel&gt; object if successful.
     */
    List<BoardModel> getBoardsByFilter(BoardFilterModel model);

    /**
     * Gets the boards by filter.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<BoardModel>> getBoardsByFilterAsync(BoardFilterModel model, final ServiceCallback<List<BoardModel>> serviceCallback);

    /**
     * Gets the boards by filter.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    Observable<List<BoardModel>> getBoardsByFilterAsync(BoardFilterModel model);

    /**
     * Gets the boards by filter.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    Observable<ServiceResponse<List<BoardModel>>> getBoardsByFilterWithServiceResponseAsync(BoardFilterModel model);

    /**
     * Gets all switches associated with a specific board Id.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchModel&gt; object if successful.
     */
    List<SwitchModel> getSwitchesByBoardId(int boardId);

    /**
     * Gets all switches associated with a specific board Id.
     *
     * @param boardId The board identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SwitchModel>> getSwitchesByBoardIdAsync(int boardId, final ServiceCallback<List<SwitchModel>> serviceCallback);

    /**
     * Gets all switches associated with a specific board Id.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    Observable<List<SwitchModel>> getSwitchesByBoardIdAsync(int boardId);

    /**
     * Gets all switches associated with a specific board Id.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    Observable<ServiceResponse<List<SwitchModel>>> getSwitchesByBoardIdWithServiceResponseAsync(int boardId);

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SwitchModel object if successful.
     */
    SwitchModel createSwitch(int boardId);

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SwitchModel> createSwitchAsync(int boardId, final ServiceCallback<SwitchModel> serviceCallback);

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    Observable<SwitchModel> createSwitchAsync(int boardId);

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    Observable<ServiceResponse<SwitchModel>> createSwitchWithServiceResponseAsync(int boardId);
    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param switchPostModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SwitchModel object if successful.
     */
    SwitchModel createSwitch(int boardId, SwitchPostModel switchPostModel);

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param switchPostModel The switch model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SwitchModel> createSwitchAsync(int boardId, SwitchPostModel switchPostModel, final ServiceCallback<SwitchModel> serviceCallback);

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param switchPostModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    Observable<SwitchModel> createSwitchAsync(int boardId, SwitchPostModel switchPostModel);

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param switchPostModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    Observable<ServiceResponse<SwitchModel>> createSwitchWithServiceResponseAsync(int boardId, SwitchPostModel switchPostModel);

    /**
     * Gets a specific switch by the switch Id.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SwitchModel object if successful.
     */
    SwitchModel getSwitch(int id, String boardId);

    /**
     * Gets a specific switch by the switch Id.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SwitchModel> getSwitchAsync(int id, String boardId, final ServiceCallback<SwitchModel> serviceCallback);

    /**
     * Gets a specific switch by the switch Id.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    Observable<SwitchModel> getSwitchAsync(int id, String boardId);

    /**
     * Gets a specific switch by the switch Id.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    Observable<ServiceResponse<SwitchModel>> getSwitchWithServiceResponseAsync(int id, String boardId);

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateSwitch(int id, String boardId);

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateSwitchAsync(int id, String boardId, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateSwitchAsync(int id, String boardId);

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateSwitchWithServiceResponseAsync(int id, String boardId);
    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param switchPutModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void updateSwitch(int id, String boardId, SwitchPutModel switchPutModel);

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param switchPutModel The switch model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> updateSwitchAsync(int id, String boardId, SwitchPutModel switchPutModel, final ServiceCallback<Void> serviceCallback);

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param switchPutModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> updateSwitchAsync(int id, String boardId, SwitchPutModel switchPutModel);

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param switchPutModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> updateSwitchWithServiceResponseAsync(int id, String boardId, SwitchPutModel switchPutModel);

    /**
     * Deletes a switch and place it in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteSwitchVersion(int id, String boardId);

    /**
     * Deletes a switch and place it in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteSwitchVersionAsync(int id, String boardId, final ServiceCallback<Void> serviceCallback);

    /**
     * Deletes a switch and place it in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteSwitchVersionAsync(int id, String boardId);

    /**
     * Deletes a switch and place it in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteSwitchVersionWithServiceResponseAsync(int id, String boardId);

    /**
     * Gets a specific previous switch version.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SwitchHistoryModel object if successful.
     */
    SwitchHistoryModel getSwitchHistory(int id, String boardId);

    /**
     * Gets a specific previous switch version.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SwitchHistoryModel> getSwitchHistoryAsync(int id, String boardId, final ServiceCallback<SwitchHistoryModel> serviceCallback);

    /**
     * Gets a specific previous switch version.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchHistoryModel object
     */
    Observable<SwitchHistoryModel> getSwitchHistoryAsync(int id, String boardId);

    /**
     * Gets a specific previous switch version.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchHistoryModel object
     */
    Observable<ServiceResponse<SwitchHistoryModel>> getSwitchHistoryWithServiceResponseAsync(int id, String boardId);

    /**
     * Gets all of the previous switches for a board.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchHistoryModel&gt; object if successful.
     */
    List<SwitchHistoryModel> getAllSwitchHistoryByBoard(int boardId);

    /**
     * Gets all of the previous switches for a board.
     *
     * @param boardId The board identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SwitchHistoryModel>> getAllSwitchHistoryByBoardAsync(int boardId, final ServiceCallback<List<SwitchHistoryModel>> serviceCallback);

    /**
     * Gets all of the previous switches for a board.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchHistoryModel&gt; object
     */
    Observable<List<SwitchHistoryModel>> getAllSwitchHistoryByBoardAsync(int boardId);

    /**
     * Gets all of the previous switches for a board.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchHistoryModel&gt; object
     */
    Observable<ServiceResponse<List<SwitchHistoryModel>>> getAllSwitchHistoryByBoardWithServiceResponseAsync(int boardId);

    /**
     * Gets all of the previous switches for a switch.
     *
     * @param switchId The switch identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchHistoryModel&gt; object if successful.
     */
    List<SwitchHistoryModel> getAllSwitchHistoryBySwitch(int switchId, String boardId);

    /**
     * Gets all of the previous switches for a switch.
     *
     * @param switchId The switch identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SwitchHistoryModel>> getAllSwitchHistoryBySwitchAsync(int switchId, String boardId, final ServiceCallback<List<SwitchHistoryModel>> serviceCallback);

    /**
     * Gets all of the previous switches for a switch.
     *
     * @param switchId The switch identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchHistoryModel&gt; object
     */
    Observable<List<SwitchHistoryModel>> getAllSwitchHistoryBySwitchAsync(int switchId, String boardId);

    /**
     * Gets all of the previous switches for a switch.
     *
     * @param switchId The switch identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchHistoryModel&gt; object
     */
    Observable<ServiceResponse<List<SwitchHistoryModel>>> getAllSwitchHistoryBySwitchWithServiceResponseAsync(int switchId, String boardId);

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchModel&gt; object if successful.
     */
    List<SwitchModel> getSwitchesByFilter(int boardId);

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SwitchModel>> getSwitchesByFilterAsync(int boardId, final ServiceCallback<List<SwitchModel>> serviceCallback);

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    Observable<List<SwitchModel>> getSwitchesByFilterAsync(int boardId);

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    Observable<ServiceResponse<List<SwitchModel>>> getSwitchesByFilterWithServiceResponseAsync(int boardId);
    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchModel&gt; object if successful.
     */
    List<SwitchModel> getSwitchesByFilter(int boardId, SwitchFilterModel model);

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<SwitchModel>> getSwitchesByFilterAsync(int boardId, SwitchFilterModel model, final ServiceCallback<List<SwitchModel>> serviceCallback);

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    Observable<List<SwitchModel>> getSwitchesByFilterAsync(int boardId, SwitchFilterModel model);

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    Observable<ServiceResponse<List<SwitchModel>>> getSwitchesByFilterWithServiceResponseAsync(int boardId, SwitchFilterModel model);

    /**
     * Rollback to a previous switch.
     *
     * @param switchId The switch identifier.
     * @param switchHistoryId The switch history identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void rollbackSwitch(int switchId, int switchHistoryId, String boardId);

    /**
     * Rollback to a previous switch.
     *
     * @param switchId The switch identifier.
     * @param switchHistoryId The switch history identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> rollbackSwitchAsync(int switchId, int switchHistoryId, String boardId, final ServiceCallback<Void> serviceCallback);

    /**
     * Rollback to a previous switch.
     *
     * @param switchId The switch identifier.
     * @param switchHistoryId The switch history identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> rollbackSwitchAsync(int switchId, int switchHistoryId, String boardId);

    /**
     * Rollback to a previous switch.
     *
     * @param switchId The switch identifier.
     * @param switchHistoryId The switch history identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> rollbackSwitchWithServiceResponseAsync(int switchId, int switchHistoryId, String boardId);

}
