/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package swagger.implementation;

import .SoftheonSwitchboard;
import com.microsoft.rest.ServiceClient;
import com.microsoft.rest.RestClient;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import .models.BoardFilterModel;
import .models.BoardHistoryModel;
import .models.BoardModel;
import .models.BoardPostModel;
import .models.BoardPutModel;
import .models.SwitchFilterModel;
import .models.SwitchHistoryModel;
import .models.SwitchModel;
import .models.SwitchPostModel;
import .models.SwitchPutModel;
import com.google.common.reflect.TypeToken;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * Initializes a new instance of the SoftheonSwitchboard class.
 */
public class SoftheonSwitchboardImpl extends ServiceClient implements SoftheonSwitchboard {
    /**
     * The Retrofit service to perform REST calls.
     */
    private SoftheonSwitchboardService service;

    /**
     * Initializes an instance of SoftheonSwitchboard client.
     */
    public SoftheonSwitchboardImpl() {
        this("https://");
    }

    /**
     * Initializes an instance of SoftheonSwitchboard client.
     *
     * @param baseUrl the base URL of the host
     */
    public SoftheonSwitchboardImpl(String baseUrl) {
        super(baseUrl);
        initialize();
    }

    /**
     * Initializes an instance of SoftheonSwitchboard client.
     *
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public SoftheonSwitchboardImpl(OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        this("https://", clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of SoftheonSwitchboard client.
     *
     * @param baseUrl the base URL of the host
     * @param clientBuilder the builder for building an OkHttp client, bundled with user configurations
     * @param restBuilder the builder for building an Retrofit client, bundled with user configurations
     */
    public SoftheonSwitchboardImpl(String baseUrl, OkHttpClient.Builder clientBuilder, Retrofit.Builder restBuilder) {
        super(baseUrl, clientBuilder, restBuilder);
        initialize();
    }

    /**
     * Initializes an instance of SoftheonSwitchboard client.
     *
     * @param restClient the REST client containing pre-configured settings
     */
    public SoftheonSwitchboardImpl(RestClient restClient) {
        super(restClient);
        initialize();
    }

    private void initialize() {
        initializeService();
    }

    private void initializeService() {
        service = retrofit().create(SoftheonSwitchboardService.class);
    }

    /**
     * The interface defining all the services for SoftheonSwitchboard to be
     * used by Retrofit to perform actually REST calls.
     */
    interface SoftheonSwitchboardService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getBoardById" })
        @GET("v1/Board/{id}")
        Observable<Response<ResponseBody>> getBoardById(@Path("id") int id);

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard updateBoard" })
        @PUT("v1/Board/{id}")
        Observable<Response<ResponseBody>> updateBoard(@Path("id") int id, @Body BoardPutModel model);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard deleteBoard" })
        @HTTP(path = "v1/Board/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteBoard(@Path("id") int id);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getAllBoards" })
        @GET("v1/Board")
        Observable<Response<ResponseBody>> getAllBoards();

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard createBoard" })
        @POST("v1/Board")
        Observable<Response<ResponseBody>> createBoard(@Body BoardPostModel model);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getAllBoardHistoryForTheAccount" })
        @GET("v1/Board/History")
        Observable<Response<ResponseBody>> getAllBoardHistoryForTheAccount();

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getBoardHistoryById" })
        @GET("v1/Board/History/{id}")
        Observable<Response<ResponseBody>> getBoardHistoryById(@Path("id") int id);

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getBoardsByFilter" })
        @POST("v1/Board/search")
        Observable<Response<ResponseBody>> getBoardsByFilter(@Body BoardFilterModel model);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getSwitchesByBoardId" })
        @GET("v1/Board/{boardId}/Switch")
        Observable<Response<ResponseBody>> getSwitchesByBoardId(@Path("boardId") int boardId);

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard createSwitch" })
        @POST("v1/Board/{boardId}/Switch")
        Observable<Response<ResponseBody>> createSwitch(@Path("boardId") int boardId, @Body SwitchPostModel switchPostModel);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getSwitch" })
        @GET("v1/Board/{boardId}/Switch/{id}")
        Observable<Response<ResponseBody>> getSwitch(@Path("id") int id, @Path("boardId") String boardId);

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard updateSwitch" })
        @PUT("v1/Board/{boardId}/Switch/{id}")
        Observable<Response<ResponseBody>> updateSwitch(@Path("id") int id, @Path("boardId") String boardId, @Body SwitchPutModel switchPutModel);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard deleteSwitchVersion" })
        @HTTP(path = "v1/Board/{boardId}/Switch/{id}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteSwitchVersion(@Path("id") int id, @Path("boardId") String boardId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getSwitchHistory" })
        @GET("v1/Board/{boardId}/Switch/History/{id}")
        Observable<Response<ResponseBody>> getSwitchHistory(@Path("id") int id, @Path("boardId") String boardId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getAllSwitchHistoryByBoard" })
        @GET("v1/Board/{boardId}/Switch/History")
        Observable<Response<ResponseBody>> getAllSwitchHistoryByBoard(@Path("boardId") int boardId);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getAllSwitchHistoryBySwitch" })
        @GET("v1/Board/{boardId}/Switch/{switchId}/History")
        Observable<Response<ResponseBody>> getAllSwitchHistoryBySwitch(@Path("switchId") int switchId, @Path("boardId") String boardId);

        @Headers({ "Content-Type: application/json-patch+json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard getSwitchesByFilter" })
        @POST("v1/Board/{boardId}/Switch/search")
        Observable<Response<ResponseBody>> getSwitchesByFilter(@Path("boardId") int boardId, @Body SwitchFilterModel model);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: .SoftheonSwitchboard rollbackSwitch" })
        @PUT("v1/Board/{boardId}/Switch/{switchId}/history/{switchHistoryId}")
        Observable<Response<ResponseBody>> rollbackSwitch(@Path("switchId") int switchId, @Path("switchHistoryId") int switchHistoryId, @Path("boardId") String boardId);

    }

    /**
     * Gets a board by the board id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BoardModel object if successful.
     */
    public BoardModel getBoardById(int id) {
        return getBoardByIdWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Gets a board by the board id.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BoardModel> getBoardByIdAsync(int id, final ServiceCallback<BoardModel> serviceCallback) {
        return ServiceFuture.fromResponse(getBoardByIdWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Gets a board by the board id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    public Observable<BoardModel> getBoardByIdAsync(int id) {
        return getBoardByIdWithServiceResponseAsync(id).map(new Func1<ServiceResponse<BoardModel>, BoardModel>() {
            @Override
            public BoardModel call(ServiceResponse<BoardModel> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a board by the board id.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    public Observable<ServiceResponse<BoardModel>> getBoardByIdWithServiceResponseAsync(int id) {
        return service.getBoardById(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BoardModel>>>() {
                @Override
                public Observable<ServiceResponse<BoardModel>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BoardModel> clientResponse = getBoardByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BoardModel> getBoardByIdDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<BoardModel, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<BoardModel>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void updateBoard(int id) {
        updateBoardWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateBoardAsync(int id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateBoardWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateBoardAsync(int id) {
        return updateBoardWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateBoardWithServiceResponseAsync(int id) {
        final BoardPutModel model = null;
        return service.updateBoard(id, model)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateBoardDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void updateBoard(int id, BoardPutModel model) {
        updateBoardWithServiceResponseAsync(id, model).toBlocking().single().body();
    }

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateBoardAsync(int id, BoardPutModel model, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateBoardWithServiceResponseAsync(id, model), serviceCallback);
    }

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateBoardAsync(int id, BoardPutModel model) {
        return updateBoardWithServiceResponseAsync(id, model).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Puts the specified model.
     *
     * @param id The identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateBoardWithServiceResponseAsync(int id, BoardPutModel model) {
        Validator.validate(model);
        return service.updateBoard(id, model)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateBoardDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateBoardDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Deletes the specified identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteBoard(int id) {
        deleteBoardWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Deletes the specified identifier.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteBoardAsync(int id, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteBoardWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Deletes the specified identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteBoardAsync(int id) {
        return deleteBoardWithServiceResponseAsync(id).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes the specified identifier.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteBoardWithServiceResponseAsync(int id) {
        return service.deleteBoard(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteBoardDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteBoardDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets all boards.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BoardModel&gt; object if successful.
     */
    public List<BoardModel> getAllBoards() {
        return getAllBoardsWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets all boards.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BoardModel>> getAllBoardsAsync(final ServiceCallback<List<BoardModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getAllBoardsWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets all boards.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    public Observable<List<BoardModel>> getAllBoardsAsync() {
        return getAllBoardsWithServiceResponseAsync().map(new Func1<ServiceResponse<List<BoardModel>>, List<BoardModel>>() {
            @Override
            public List<BoardModel> call(ServiceResponse<List<BoardModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all boards.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    public Observable<ServiceResponse<List<BoardModel>>> getAllBoardsWithServiceResponseAsync() {
        return service.getAllBoards()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<BoardModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<BoardModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<BoardModel>> clientResponse = getAllBoardsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<BoardModel>> getAllBoardsDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<BoardModel>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<BoardModel>>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Posts the specified model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BoardModel object if successful.
     */
    public BoardModel createBoard() {
        return createBoardWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Posts the specified model.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BoardModel> createBoardAsync(final ServiceCallback<BoardModel> serviceCallback) {
        return ServiceFuture.fromResponse(createBoardWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Posts the specified model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    public Observable<BoardModel> createBoardAsync() {
        return createBoardWithServiceResponseAsync().map(new Func1<ServiceResponse<BoardModel>, BoardModel>() {
            @Override
            public BoardModel call(ServiceResponse<BoardModel> response) {
                return response.body();
            }
        });
    }

    /**
     * Posts the specified model.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    public Observable<ServiceResponse<BoardModel>> createBoardWithServiceResponseAsync() {
        final BoardPostModel model = null;
        return service.createBoard(model)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BoardModel>>>() {
                @Override
                public Observable<ServiceResponse<BoardModel>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BoardModel> clientResponse = createBoardDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BoardModel object if successful.
     */
    public BoardModel createBoard(BoardPostModel model) {
        return createBoardWithServiceResponseAsync(model).toBlocking().single().body();
    }

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BoardModel> createBoardAsync(BoardPostModel model, final ServiceCallback<BoardModel> serviceCallback) {
        return ServiceFuture.fromResponse(createBoardWithServiceResponseAsync(model), serviceCallback);
    }

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    public Observable<BoardModel> createBoardAsync(BoardPostModel model) {
        return createBoardWithServiceResponseAsync(model).map(new Func1<ServiceResponse<BoardModel>, BoardModel>() {
            @Override
            public BoardModel call(ServiceResponse<BoardModel> response) {
                return response.body();
            }
        });
    }

    /**
     * Posts the specified model.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardModel object
     */
    public Observable<ServiceResponse<BoardModel>> createBoardWithServiceResponseAsync(BoardPostModel model) {
        Validator.validate(model);
        return service.createBoard(model)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BoardModel>>>() {
                @Override
                public Observable<ServiceResponse<BoardModel>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BoardModel> clientResponse = createBoardDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BoardModel> createBoardDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<BoardModel, RestException>newInstance(this.serializerAdapter())
                .register(201, new TypeToken<BoardModel>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets all board history for account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BoardHistoryModel&gt; object if successful.
     */
    public List<BoardHistoryModel> getAllBoardHistoryForTheAccount() {
        return getAllBoardHistoryForTheAccountWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets all board history for account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BoardHistoryModel>> getAllBoardHistoryForTheAccountAsync(final ServiceCallback<List<BoardHistoryModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getAllBoardHistoryForTheAccountWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets all board history for account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardHistoryModel&gt; object
     */
    public Observable<List<BoardHistoryModel>> getAllBoardHistoryForTheAccountAsync() {
        return getAllBoardHistoryForTheAccountWithServiceResponseAsync().map(new Func1<ServiceResponse<List<BoardHistoryModel>>, List<BoardHistoryModel>>() {
            @Override
            public List<BoardHistoryModel> call(ServiceResponse<List<BoardHistoryModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all board history for account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardHistoryModel&gt; object
     */
    public Observable<ServiceResponse<List<BoardHistoryModel>>> getAllBoardHistoryForTheAccountWithServiceResponseAsync() {
        return service.getAllBoardHistoryForTheAccount()
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<BoardHistoryModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<BoardHistoryModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<BoardHistoryModel>> clientResponse = getAllBoardHistoryForTheAccountDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<BoardHistoryModel>> getAllBoardHistoryForTheAccountDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<BoardHistoryModel>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<BoardHistoryModel>>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets the board history.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the BoardHistoryModel object if successful.
     */
    public BoardHistoryModel getBoardHistoryById(int id) {
        return getBoardHistoryByIdWithServiceResponseAsync(id).toBlocking().single().body();
    }

    /**
     * Gets the board history.
     *
     * @param id The identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<BoardHistoryModel> getBoardHistoryByIdAsync(int id, final ServiceCallback<BoardHistoryModel> serviceCallback) {
        return ServiceFuture.fromResponse(getBoardHistoryByIdWithServiceResponseAsync(id), serviceCallback);
    }

    /**
     * Gets the board history.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardHistoryModel object
     */
    public Observable<BoardHistoryModel> getBoardHistoryByIdAsync(int id) {
        return getBoardHistoryByIdWithServiceResponseAsync(id).map(new Func1<ServiceResponse<BoardHistoryModel>, BoardHistoryModel>() {
            @Override
            public BoardHistoryModel call(ServiceResponse<BoardHistoryModel> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the board history.
     *
     * @param id The identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the BoardHistoryModel object
     */
    public Observable<ServiceResponse<BoardHistoryModel>> getBoardHistoryByIdWithServiceResponseAsync(int id) {
        return service.getBoardHistoryById(id)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<BoardHistoryModel>>>() {
                @Override
                public Observable<ServiceResponse<BoardHistoryModel>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<BoardHistoryModel> clientResponse = getBoardHistoryByIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<BoardHistoryModel> getBoardHistoryByIdDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<BoardHistoryModel, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<BoardHistoryModel>() { }.getType())
                .register(400, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets the boards by filter.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BoardModel&gt; object if successful.
     */
    public List<BoardModel> getBoardsByFilter() {
        return getBoardsByFilterWithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * Gets the boards by filter.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BoardModel>> getBoardsByFilterAsync(final ServiceCallback<List<BoardModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getBoardsByFilterWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Gets the boards by filter.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    public Observable<List<BoardModel>> getBoardsByFilterAsync() {
        return getBoardsByFilterWithServiceResponseAsync().map(new Func1<ServiceResponse<List<BoardModel>>, List<BoardModel>>() {
            @Override
            public List<BoardModel> call(ServiceResponse<List<BoardModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the boards by filter.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    public Observable<ServiceResponse<List<BoardModel>>> getBoardsByFilterWithServiceResponseAsync() {
        final BoardFilterModel model = null;
        return service.getBoardsByFilter(model)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<BoardModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<BoardModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<BoardModel>> clientResponse = getBoardsByFilterDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the boards by filter.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;BoardModel&gt; object if successful.
     */
    public List<BoardModel> getBoardsByFilter(BoardFilterModel model) {
        return getBoardsByFilterWithServiceResponseAsync(model).toBlocking().single().body();
    }

    /**
     * Gets the boards by filter.
     *
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<BoardModel>> getBoardsByFilterAsync(BoardFilterModel model, final ServiceCallback<List<BoardModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getBoardsByFilterWithServiceResponseAsync(model), serviceCallback);
    }

    /**
     * Gets the boards by filter.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    public Observable<List<BoardModel>> getBoardsByFilterAsync(BoardFilterModel model) {
        return getBoardsByFilterWithServiceResponseAsync(model).map(new Func1<ServiceResponse<List<BoardModel>>, List<BoardModel>>() {
            @Override
            public List<BoardModel> call(ServiceResponse<List<BoardModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the boards by filter.
     *
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;BoardModel&gt; object
     */
    public Observable<ServiceResponse<List<BoardModel>>> getBoardsByFilterWithServiceResponseAsync(BoardFilterModel model) {
        Validator.validate(model);
        return service.getBoardsByFilter(model)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<BoardModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<BoardModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<BoardModel>> clientResponse = getBoardsByFilterDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<BoardModel>> getBoardsByFilterDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<BoardModel>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<BoardModel>>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets all switches associated with a specific board Id.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchModel&gt; object if successful.
     */
    public List<SwitchModel> getSwitchesByBoardId(int boardId) {
        return getSwitchesByBoardIdWithServiceResponseAsync(boardId).toBlocking().single().body();
    }

    /**
     * Gets all switches associated with a specific board Id.
     *
     * @param boardId The board identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SwitchModel>> getSwitchesByBoardIdAsync(int boardId, final ServiceCallback<List<SwitchModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getSwitchesByBoardIdWithServiceResponseAsync(boardId), serviceCallback);
    }

    /**
     * Gets all switches associated with a specific board Id.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    public Observable<List<SwitchModel>> getSwitchesByBoardIdAsync(int boardId) {
        return getSwitchesByBoardIdWithServiceResponseAsync(boardId).map(new Func1<ServiceResponse<List<SwitchModel>>, List<SwitchModel>>() {
            @Override
            public List<SwitchModel> call(ServiceResponse<List<SwitchModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all switches associated with a specific board Id.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    public Observable<ServiceResponse<List<SwitchModel>>> getSwitchesByBoardIdWithServiceResponseAsync(int boardId) {
        return service.getSwitchesByBoardId(boardId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SwitchModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<SwitchModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<SwitchModel>> clientResponse = getSwitchesByBoardIdDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<SwitchModel>> getSwitchesByBoardIdDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<SwitchModel>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<SwitchModel>>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SwitchModel object if successful.
     */
    public SwitchModel createSwitch(int boardId) {
        return createSwitchWithServiceResponseAsync(boardId).toBlocking().single().body();
    }

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SwitchModel> createSwitchAsync(int boardId, final ServiceCallback<SwitchModel> serviceCallback) {
        return ServiceFuture.fromResponse(createSwitchWithServiceResponseAsync(boardId), serviceCallback);
    }

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    public Observable<SwitchModel> createSwitchAsync(int boardId) {
        return createSwitchWithServiceResponseAsync(boardId).map(new Func1<ServiceResponse<SwitchModel>, SwitchModel>() {
            @Override
            public SwitchModel call(ServiceResponse<SwitchModel> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    public Observable<ServiceResponse<SwitchModel>> createSwitchWithServiceResponseAsync(int boardId) {
        final SwitchPostModel switchPostModel = null;
        return service.createSwitch(boardId, switchPostModel)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SwitchModel>>>() {
                @Override
                public Observable<ServiceResponse<SwitchModel>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SwitchModel> clientResponse = createSwitchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param switchPostModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SwitchModel object if successful.
     */
    public SwitchModel createSwitch(int boardId, SwitchPostModel switchPostModel) {
        return createSwitchWithServiceResponseAsync(boardId, switchPostModel).toBlocking().single().body();
    }

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param switchPostModel The switch model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SwitchModel> createSwitchAsync(int boardId, SwitchPostModel switchPostModel, final ServiceCallback<SwitchModel> serviceCallback) {
        return ServiceFuture.fromResponse(createSwitchWithServiceResponseAsync(boardId, switchPostModel), serviceCallback);
    }

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param switchPostModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    public Observable<SwitchModel> createSwitchAsync(int boardId, SwitchPostModel switchPostModel) {
        return createSwitchWithServiceResponseAsync(boardId, switchPostModel).map(new Func1<ServiceResponse<SwitchModel>, SwitchModel>() {
            @Override
            public SwitchModel call(ServiceResponse<SwitchModel> response) {
                return response.body();
            }
        });
    }

    /**
     * Creates a new switch.
     *
     * @param boardId The board identifier.
     * @param switchPostModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    public Observable<ServiceResponse<SwitchModel>> createSwitchWithServiceResponseAsync(int boardId, SwitchPostModel switchPostModel) {
        Validator.validate(switchPostModel);
        return service.createSwitch(boardId, switchPostModel)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SwitchModel>>>() {
                @Override
                public Observable<ServiceResponse<SwitchModel>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SwitchModel> clientResponse = createSwitchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SwitchModel> createSwitchDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<SwitchModel, RestException>newInstance(this.serializerAdapter())
                .register(201, new TypeToken<SwitchModel>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets a specific switch by the switch Id.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SwitchModel object if successful.
     */
    public SwitchModel getSwitch(int id, String boardId) {
        return getSwitchWithServiceResponseAsync(id, boardId).toBlocking().single().body();
    }

    /**
     * Gets a specific switch by the switch Id.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SwitchModel> getSwitchAsync(int id, String boardId, final ServiceCallback<SwitchModel> serviceCallback) {
        return ServiceFuture.fromResponse(getSwitchWithServiceResponseAsync(id, boardId), serviceCallback);
    }

    /**
     * Gets a specific switch by the switch Id.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    public Observable<SwitchModel> getSwitchAsync(int id, String boardId) {
        return getSwitchWithServiceResponseAsync(id, boardId).map(new Func1<ServiceResponse<SwitchModel>, SwitchModel>() {
            @Override
            public SwitchModel call(ServiceResponse<SwitchModel> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a specific switch by the switch Id.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchModel object
     */
    public Observable<ServiceResponse<SwitchModel>> getSwitchWithServiceResponseAsync(int id, String boardId) {
        if (boardId == null) {
            throw new IllegalArgumentException("Parameter boardId is required and cannot be null.");
        }
        return service.getSwitch(id, boardId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SwitchModel>>>() {
                @Override
                public Observable<ServiceResponse<SwitchModel>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SwitchModel> clientResponse = getSwitchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SwitchModel> getSwitchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<SwitchModel, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<SwitchModel>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void updateSwitch(int id, String boardId) {
        updateSwitchWithServiceResponseAsync(id, boardId).toBlocking().single().body();
    }

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateSwitchAsync(int id, String boardId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateSwitchWithServiceResponseAsync(id, boardId), serviceCallback);
    }

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateSwitchAsync(int id, String boardId) {
        return updateSwitchWithServiceResponseAsync(id, boardId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateSwitchWithServiceResponseAsync(int id, String boardId) {
        if (boardId == null) {
            throw new IllegalArgumentException("Parameter boardId is required and cannot be null.");
        }
        final SwitchPutModel switchPutModel = null;
        return service.updateSwitch(id, boardId, switchPutModel)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateSwitchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param switchPutModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void updateSwitch(int id, String boardId, SwitchPutModel switchPutModel) {
        updateSwitchWithServiceResponseAsync(id, boardId, switchPutModel).toBlocking().single().body();
    }

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param switchPutModel The switch model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> updateSwitchAsync(int id, String boardId, SwitchPutModel switchPutModel, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(updateSwitchWithServiceResponseAsync(id, boardId, switchPutModel), serviceCallback);
    }

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param switchPutModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> updateSwitchAsync(int id, String boardId, SwitchPutModel switchPutModel) {
        return updateSwitchWithServiceResponseAsync(id, boardId, switchPutModel).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Updates the switch and places the old version in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param switchPutModel The switch model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> updateSwitchWithServiceResponseAsync(int id, String boardId, SwitchPutModel switchPutModel) {
        if (boardId == null) {
            throw new IllegalArgumentException("Parameter boardId is required and cannot be null.");
        }
        Validator.validate(switchPutModel);
        return service.updateSwitch(id, boardId, switchPutModel)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = updateSwitchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> updateSwitchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Deletes a switch and place it in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteSwitchVersion(int id, String boardId) {
        deleteSwitchVersionWithServiceResponseAsync(id, boardId).toBlocking().single().body();
    }

    /**
     * Deletes a switch and place it in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteSwitchVersionAsync(int id, String boardId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSwitchVersionWithServiceResponseAsync(id, boardId), serviceCallback);
    }

    /**
     * Deletes a switch and place it in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteSwitchVersionAsync(int id, String boardId) {
        return deleteSwitchVersionWithServiceResponseAsync(id, boardId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Deletes a switch and place it in the history table.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteSwitchVersionWithServiceResponseAsync(int id, String boardId) {
        if (boardId == null) {
            throw new IllegalArgumentException("Parameter boardId is required and cannot be null.");
        }
        return service.deleteSwitchVersion(id, boardId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteSwitchVersionDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteSwitchVersionDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets a specific previous switch version.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SwitchHistoryModel object if successful.
     */
    public SwitchHistoryModel getSwitchHistory(int id, String boardId) {
        return getSwitchHistoryWithServiceResponseAsync(id, boardId).toBlocking().single().body();
    }

    /**
     * Gets a specific previous switch version.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<SwitchHistoryModel> getSwitchHistoryAsync(int id, String boardId, final ServiceCallback<SwitchHistoryModel> serviceCallback) {
        return ServiceFuture.fromResponse(getSwitchHistoryWithServiceResponseAsync(id, boardId), serviceCallback);
    }

    /**
     * Gets a specific previous switch version.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchHistoryModel object
     */
    public Observable<SwitchHistoryModel> getSwitchHistoryAsync(int id, String boardId) {
        return getSwitchHistoryWithServiceResponseAsync(id, boardId).map(new Func1<ServiceResponse<SwitchHistoryModel>, SwitchHistoryModel>() {
            @Override
            public SwitchHistoryModel call(ServiceResponse<SwitchHistoryModel> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets a specific previous switch version.
     *
     * @param id The identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SwitchHistoryModel object
     */
    public Observable<ServiceResponse<SwitchHistoryModel>> getSwitchHistoryWithServiceResponseAsync(int id, String boardId) {
        if (boardId == null) {
            throw new IllegalArgumentException("Parameter boardId is required and cannot be null.");
        }
        return service.getSwitchHistory(id, boardId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<SwitchHistoryModel>>>() {
                @Override
                public Observable<ServiceResponse<SwitchHistoryModel>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<SwitchHistoryModel> clientResponse = getSwitchHistoryDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<SwitchHistoryModel> getSwitchHistoryDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<SwitchHistoryModel, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<SwitchHistoryModel>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets all of the previous switches for a board.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchHistoryModel&gt; object if successful.
     */
    public List<SwitchHistoryModel> getAllSwitchHistoryByBoard(int boardId) {
        return getAllSwitchHistoryByBoardWithServiceResponseAsync(boardId).toBlocking().single().body();
    }

    /**
     * Gets all of the previous switches for a board.
     *
     * @param boardId The board identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SwitchHistoryModel>> getAllSwitchHistoryByBoardAsync(int boardId, final ServiceCallback<List<SwitchHistoryModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getAllSwitchHistoryByBoardWithServiceResponseAsync(boardId), serviceCallback);
    }

    /**
     * Gets all of the previous switches for a board.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchHistoryModel&gt; object
     */
    public Observable<List<SwitchHistoryModel>> getAllSwitchHistoryByBoardAsync(int boardId) {
        return getAllSwitchHistoryByBoardWithServiceResponseAsync(boardId).map(new Func1<ServiceResponse<List<SwitchHistoryModel>>, List<SwitchHistoryModel>>() {
            @Override
            public List<SwitchHistoryModel> call(ServiceResponse<List<SwitchHistoryModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all of the previous switches for a board.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchHistoryModel&gt; object
     */
    public Observable<ServiceResponse<List<SwitchHistoryModel>>> getAllSwitchHistoryByBoardWithServiceResponseAsync(int boardId) {
        return service.getAllSwitchHistoryByBoard(boardId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SwitchHistoryModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<SwitchHistoryModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<SwitchHistoryModel>> clientResponse = getAllSwitchHistoryByBoardDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<SwitchHistoryModel>> getAllSwitchHistoryByBoardDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<SwitchHistoryModel>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<SwitchHistoryModel>>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets all of the previous switches for a switch.
     *
     * @param switchId The switch identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchHistoryModel&gt; object if successful.
     */
    public List<SwitchHistoryModel> getAllSwitchHistoryBySwitch(int switchId, String boardId) {
        return getAllSwitchHistoryBySwitchWithServiceResponseAsync(switchId, boardId).toBlocking().single().body();
    }

    /**
     * Gets all of the previous switches for a switch.
     *
     * @param switchId The switch identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SwitchHistoryModel>> getAllSwitchHistoryBySwitchAsync(int switchId, String boardId, final ServiceCallback<List<SwitchHistoryModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getAllSwitchHistoryBySwitchWithServiceResponseAsync(switchId, boardId), serviceCallback);
    }

    /**
     * Gets all of the previous switches for a switch.
     *
     * @param switchId The switch identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchHistoryModel&gt; object
     */
    public Observable<List<SwitchHistoryModel>> getAllSwitchHistoryBySwitchAsync(int switchId, String boardId) {
        return getAllSwitchHistoryBySwitchWithServiceResponseAsync(switchId, boardId).map(new Func1<ServiceResponse<List<SwitchHistoryModel>>, List<SwitchHistoryModel>>() {
            @Override
            public List<SwitchHistoryModel> call(ServiceResponse<List<SwitchHistoryModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets all of the previous switches for a switch.
     *
     * @param switchId The switch identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchHistoryModel&gt; object
     */
    public Observable<ServiceResponse<List<SwitchHistoryModel>>> getAllSwitchHistoryBySwitchWithServiceResponseAsync(int switchId, String boardId) {
        if (boardId == null) {
            throw new IllegalArgumentException("Parameter boardId is required and cannot be null.");
        }
        return service.getAllSwitchHistoryBySwitch(switchId, boardId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SwitchHistoryModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<SwitchHistoryModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<SwitchHistoryModel>> clientResponse = getAllSwitchHistoryBySwitchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<SwitchHistoryModel>> getAllSwitchHistoryBySwitchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<List<SwitchHistoryModel>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<SwitchHistoryModel>>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchModel&gt; object if successful.
     */
    public List<SwitchModel> getSwitchesByFilter(int boardId) {
        return getSwitchesByFilterWithServiceResponseAsync(boardId).toBlocking().single().body();
    }

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SwitchModel>> getSwitchesByFilterAsync(int boardId, final ServiceCallback<List<SwitchModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getSwitchesByFilterWithServiceResponseAsync(boardId), serviceCallback);
    }

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    public Observable<List<SwitchModel>> getSwitchesByFilterAsync(int boardId) {
        return getSwitchesByFilterWithServiceResponseAsync(boardId).map(new Func1<ServiceResponse<List<SwitchModel>>, List<SwitchModel>>() {
            @Override
            public List<SwitchModel> call(ServiceResponse<List<SwitchModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    public Observable<ServiceResponse<List<SwitchModel>>> getSwitchesByFilterWithServiceResponseAsync(int boardId) {
        final SwitchFilterModel model = null;
        return service.getSwitchesByFilter(boardId, model)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SwitchModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<SwitchModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<SwitchModel>> clientResponse = getSwitchesByFilterDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;SwitchModel&gt; object if successful.
     */
    public List<SwitchModel> getSwitchesByFilter(int boardId, SwitchFilterModel model) {
        return getSwitchesByFilterWithServiceResponseAsync(boardId, model).toBlocking().single().body();
    }

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param model The model.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<SwitchModel>> getSwitchesByFilterAsync(int boardId, SwitchFilterModel model, final ServiceCallback<List<SwitchModel>> serviceCallback) {
        return ServiceFuture.fromResponse(getSwitchesByFilterWithServiceResponseAsync(boardId, model), serviceCallback);
    }

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    public Observable<List<SwitchModel>> getSwitchesByFilterAsync(int boardId, SwitchFilterModel model) {
        return getSwitchesByFilterWithServiceResponseAsync(boardId, model).map(new Func1<ServiceResponse<List<SwitchModel>>, List<SwitchModel>>() {
            @Override
            public List<SwitchModel> call(ServiceResponse<List<SwitchModel>> response) {
                return response.body();
            }
        });
    }

    /**
     * Gets the users by filter.
     *
     * @param boardId The board identifier.
     * @param model The model.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;SwitchModel&gt; object
     */
    public Observable<ServiceResponse<List<SwitchModel>>> getSwitchesByFilterWithServiceResponseAsync(int boardId, SwitchFilterModel model) {
        Validator.validate(model);
        return service.getSwitchesByFilter(boardId, model)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<SwitchModel>>>>() {
                @Override
                public Observable<ServiceResponse<List<SwitchModel>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<List<SwitchModel>> clientResponse = getSwitchesByFilterDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<List<SwitchModel>> getSwitchesByFilterDelegate(Response<ResponseBody> response) throws RestException, IOException {
        return this.restClient().responseBuilderFactory().<List<SwitchModel>, RestException>newInstance(this.serializerAdapter())
                .register(200, new TypeToken<List<SwitchModel>>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .build(response);
    }

    /**
     * Rollback to a previous switch.
     *
     * @param switchId The switch identifier.
     * @param switchHistoryId The switch history identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void rollbackSwitch(int switchId, int switchHistoryId, String boardId) {
        rollbackSwitchWithServiceResponseAsync(switchId, switchHistoryId, boardId).toBlocking().single().body();
    }

    /**
     * Rollback to a previous switch.
     *
     * @param switchId The switch identifier.
     * @param switchHistoryId The switch history identifier.
     * @param boardId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> rollbackSwitchAsync(int switchId, int switchHistoryId, String boardId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(rollbackSwitchWithServiceResponseAsync(switchId, switchHistoryId, boardId), serviceCallback);
    }

    /**
     * Rollback to a previous switch.
     *
     * @param switchId The switch identifier.
     * @param switchHistoryId The switch history identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> rollbackSwitchAsync(int switchId, int switchHistoryId, String boardId) {
        return rollbackSwitchWithServiceResponseAsync(switchId, switchHistoryId, boardId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Rollback to a previous switch.
     *
     * @param switchId The switch identifier.
     * @param switchHistoryId The switch history identifier.
     * @param boardId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> rollbackSwitchWithServiceResponseAsync(int switchId, int switchHistoryId, String boardId) {
        if (boardId == null) {
            throw new IllegalArgumentException("Parameter boardId is required and cannot be null.");
        }
        return service.rollbackSwitch(switchId, switchHistoryId, boardId)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = rollbackSwitchDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> rollbackSwitchDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .register(401, new TypeToken<Void>() { }.getType())
                .register(403, new TypeToken<Void>() { }.getType())
                .register(404, new TypeToken<Void>() { }.getType())
                .build(response);
    }

}
