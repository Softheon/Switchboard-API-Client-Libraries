// Package  implements the Azure ARM  service API version 1.
//
//
package

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
    "context"
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "github.com/Azure/go-autorest/autorest/validation"
    "net/http"
)

const (
// DefaultBaseURI is the default URI used for the service
DefaultBaseURI = "")

// BaseClient is the base client for .
type BaseClient struct {
    autorest.Client
    BaseURI string
}

// New creates an instance of the BaseClient client.
func New()BaseClient {
    return NewWithBaseURI(DefaultBaseURI, )
}

// NewWithBaseURI creates an instance of the BaseClient client.
func NewWithBaseURI(baseURI string, ) BaseClient {
    return BaseClient{
        Client: autorest.NewClientWithUserAgent(UserAgent()),
        BaseURI: baseURI,
    }
}

    // CreateBoardMethod sends the create board request.
        // Parameters:
            // model - the model.
    func (client BaseClient) CreateBoardMethod(ctx context.Context, model *BoardPostModelType) (result BoardModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: model,
         Constraints: []validation.Constraint{	{Target: "model", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.Name", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.Name", Name: validation.MaxLength, Rule: 50, Chain: nil },
        	{Target: "model.Name", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "model.Description", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.Description", Name: validation.MaxLength, Rule: 250, Chain: nil },
        	{Target: "model.Description", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        }}}}}); err != nil {
        return result, validation.NewError(".BaseClient", "CreateBoardMethod", err.Error())
        }

            req, err := client.CreateBoardMethodPreparer(ctx, model)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreateBoardMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreateBoardMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateBoardMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreateBoardMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateBoardMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreateBoardMethodPreparer prepares the CreateBoardMethod request.
        func (client BaseClient) CreateBoardMethodPreparer(ctx context.Context, model *BoardPostModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v1/Board"))
        if model != nil {
            preparer = autorest.DecoratePreparer(preparer,
                                autorest.WithJSON(model))
        }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateBoardMethodSender sends the CreateBoardMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateBoardMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // CreateBoardMethodResponder handles the response to the CreateBoardMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreateBoardMethodResponder(resp *http.Response) (result BoardModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusBadRequest,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // CreateSwitchMethod sends the create switch request.
        // Parameters:
            // boardID - the board identifier.
            // switchPostModel - the switch model.
    func (client BaseClient) CreateSwitchMethod(ctx context.Context, boardID int32, switchPostModel *SwitchPostModelType) (result SwitchModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: switchPostModel,
         Constraints: []validation.Constraint{	{Target: "switchPostModel", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPostModel.Name", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPostModel.Name", Name: validation.MaxLength, Rule: 50, Chain: nil },
        	{Target: "switchPostModel.Name", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "switchPostModel.Description", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPostModel.Description", Name: validation.MaxLength, Rule: 250, Chain: nil },
        	{Target: "switchPostModel.Description", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "switchPostModel.Comment", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPostModel.Comment", Name: validation.MaxLength, Rule: 250, Chain: nil },
        	{Target: "switchPostModel.Comment", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "switchPostModel.ValueType", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPostModel.ValueType", Name: validation.MaxLength, Rule: 10, Chain: nil },
        	{Target: "switchPostModel.ValueType", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        }}}}}); err != nil {
        return result, validation.NewError(".BaseClient", "CreateSwitchMethod", err.Error())
        }

            req, err := client.CreateSwitchMethodPreparer(ctx, boardID, switchPostModel)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "CreateSwitchMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.CreateSwitchMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateSwitchMethod", resp, "Failure sending request")
            return
            }

            result, err = client.CreateSwitchMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "CreateSwitchMethod", resp, "Failure responding to request")
            }

        return
        }

        // CreateSwitchMethodPreparer prepares the CreateSwitchMethod request.
        func (client BaseClient) CreateSwitchMethodPreparer(ctx context.Context, boardID int32, switchPostModel *SwitchPostModelType) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch",pathParameters))
        if switchPostModel != nil {
            preparer = autorest.DecoratePreparer(preparer,
                                autorest.WithJSON(switchPostModel))
        }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // CreateSwitchMethodSender sends the CreateSwitchMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) CreateSwitchMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // CreateSwitchMethodResponder handles the response to the CreateSwitchMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) CreateSwitchMethodResponder(resp *http.Response) (result SwitchModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusCreated,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // DeleteBoardMethod sends the delete board request.
        // Parameters:
            // ID - the identifier.
    func (client BaseClient) DeleteBoardMethod(ctx context.Context, ID int32) (result autorest.Response, err error) {
        req, err := client.DeleteBoardMethodPreparer(ctx, ID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "DeleteBoardMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.DeleteBoardMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "DeleteBoardMethod", resp, "Failure sending request")
            return
            }

            result, err = client.DeleteBoardMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "DeleteBoardMethod", resp, "Failure responding to request")
            }

        return
        }

        // DeleteBoardMethodPreparer prepares the DeleteBoardMethod request.
        func (client BaseClient) DeleteBoardMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsDelete(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // DeleteBoardMethodSender sends the DeleteBoardMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) DeleteBoardMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // DeleteBoardMethodResponder handles the response to the DeleteBoardMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) DeleteBoardMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusBadRequest,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // DeleteSwitchVersionMethod sends the delete switch version request.
        // Parameters:
            // ID - the identifier.
    func (client BaseClient) DeleteSwitchVersionMethod(ctx context.Context, ID int32, boardID string) (result autorest.Response, err error) {
        req, err := client.DeleteSwitchVersionMethodPreparer(ctx, ID, boardID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "DeleteSwitchVersionMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.DeleteSwitchVersionMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "DeleteSwitchVersionMethod", resp, "Failure sending request")
            return
            }

            result, err = client.DeleteSwitchVersionMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "DeleteSwitchVersionMethod", resp, "Failure responding to request")
            }

        return
        }

        // DeleteSwitchVersionMethodPreparer prepares the DeleteSwitchVersionMethod request.
        func (client BaseClient) DeleteSwitchVersionMethodPreparer(ctx context.Context, ID int32, boardID string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsDelete(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // DeleteSwitchVersionMethodSender sends the DeleteSwitchVersionMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) DeleteSwitchVersionMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // DeleteSwitchVersionMethodResponder handles the response to the DeleteSwitchVersionMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) DeleteSwitchVersionMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // GetAllBoardHistoryForTheAccountMethod sends the get all board history for the account request.
    func (client BaseClient) GetAllBoardHistoryForTheAccountMethod(ctx context.Context) (result ListBoardHistoryModelType, err error) {
        req, err := client.GetAllBoardHistoryForTheAccountMethodPreparer(ctx)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllBoardHistoryForTheAccountMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetAllBoardHistoryForTheAccountMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllBoardHistoryForTheAccountMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetAllBoardHistoryForTheAccountMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllBoardHistoryForTheAccountMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetAllBoardHistoryForTheAccountMethodPreparer prepares the GetAllBoardHistoryForTheAccountMethod request.
        func (client BaseClient) GetAllBoardHistoryForTheAccountMethodPreparer(ctx context.Context) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v1/Board/History"))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetAllBoardHistoryForTheAccountMethodSender sends the GetAllBoardHistoryForTheAccountMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetAllBoardHistoryForTheAccountMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetAllBoardHistoryForTheAccountMethodResponder handles the response to the GetAllBoardHistoryForTheAccountMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetAllBoardHistoryForTheAccountMethodResponder(resp *http.Response) (result ListBoardHistoryModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetAllBoardsMethod sends the get all boards request.
    func (client BaseClient) GetAllBoardsMethod(ctx context.Context) (result ListBoardModelType, err error) {
        req, err := client.GetAllBoardsMethodPreparer(ctx)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllBoardsMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetAllBoardsMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllBoardsMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetAllBoardsMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllBoardsMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetAllBoardsMethodPreparer prepares the GetAllBoardsMethod request.
        func (client BaseClient) GetAllBoardsMethodPreparer(ctx context.Context) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v1/Board"))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetAllBoardsMethodSender sends the GetAllBoardsMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetAllBoardsMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetAllBoardsMethodResponder handles the response to the GetAllBoardsMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetAllBoardsMethodResponder(resp *http.Response) (result ListBoardModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetAllSwitchHistoryByBoardMethod sends the get all switch history by board request.
        // Parameters:
            // boardID - the board identifier.
    func (client BaseClient) GetAllSwitchHistoryByBoardMethod(ctx context.Context, boardID int32) (result ListSwitchHistoryModelType, err error) {
        req, err := client.GetAllSwitchHistoryByBoardMethodPreparer(ctx, boardID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllSwitchHistoryByBoardMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetAllSwitchHistoryByBoardMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllSwitchHistoryByBoardMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetAllSwitchHistoryByBoardMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllSwitchHistoryByBoardMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetAllSwitchHistoryByBoardMethodPreparer prepares the GetAllSwitchHistoryByBoardMethod request.
        func (client BaseClient) GetAllSwitchHistoryByBoardMethodPreparer(ctx context.Context, boardID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch/History",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetAllSwitchHistoryByBoardMethodSender sends the GetAllSwitchHistoryByBoardMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetAllSwitchHistoryByBoardMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetAllSwitchHistoryByBoardMethodResponder handles the response to the GetAllSwitchHistoryByBoardMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetAllSwitchHistoryByBoardMethodResponder(resp *http.Response) (result ListSwitchHistoryModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetAllSwitchHistoryBySwitchMethod sends the get all switch history by switch request.
        // Parameters:
            // switchID - the switch identifier.
    func (client BaseClient) GetAllSwitchHistoryBySwitchMethod(ctx context.Context, switchID int32, boardID string) (result ListSwitchHistoryModelType, err error) {
        req, err := client.GetAllSwitchHistoryBySwitchMethodPreparer(ctx, switchID, boardID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllSwitchHistoryBySwitchMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetAllSwitchHistoryBySwitchMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllSwitchHistoryBySwitchMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetAllSwitchHistoryBySwitchMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetAllSwitchHistoryBySwitchMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetAllSwitchHistoryBySwitchMethodPreparer prepares the GetAllSwitchHistoryBySwitchMethod request.
        func (client BaseClient) GetAllSwitchHistoryBySwitchMethodPreparer(ctx context.Context, switchID int32, boardID string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            "switchId": autorest.Encode("path",switchID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch/{switchId}/History",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetAllSwitchHistoryBySwitchMethodSender sends the GetAllSwitchHistoryBySwitchMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetAllSwitchHistoryBySwitchMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetAllSwitchHistoryBySwitchMethodResponder handles the response to the GetAllSwitchHistoryBySwitchMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetAllSwitchHistoryBySwitchMethodResponder(resp *http.Response) (result ListSwitchHistoryModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetBoardByIDMethod sends the get board by id request.
        // Parameters:
            // ID - the identifier.
    func (client BaseClient) GetBoardByIDMethod(ctx context.Context, ID int32) (result BoardModelType, err error) {
        req, err := client.GetBoardByIDMethodPreparer(ctx, ID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardByIDMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetBoardByIDMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardByIDMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetBoardByIDMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardByIDMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetBoardByIDMethodPreparer prepares the GetBoardByIDMethod request.
        func (client BaseClient) GetBoardByIDMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetBoardByIDMethodSender sends the GetBoardByIDMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetBoardByIDMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetBoardByIDMethodResponder handles the response to the GetBoardByIDMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetBoardByIDMethodResponder(resp *http.Response) (result BoardModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetBoardHistoryByIDMethod sends the get board history by id request.
        // Parameters:
            // ID - the identifier.
    func (client BaseClient) GetBoardHistoryByIDMethod(ctx context.Context, ID int32) (result BoardHistoryModelType, err error) {
        req, err := client.GetBoardHistoryByIDMethodPreparer(ctx, ID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardHistoryByIDMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetBoardHistoryByIDMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardHistoryByIDMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetBoardHistoryByIDMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardHistoryByIDMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetBoardHistoryByIDMethodPreparer prepares the GetBoardHistoryByIDMethod request.
        func (client BaseClient) GetBoardHistoryByIDMethodPreparer(ctx context.Context, ID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/History/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetBoardHistoryByIDMethodSender sends the GetBoardHistoryByIDMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetBoardHistoryByIDMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetBoardHistoryByIDMethodResponder handles the response to the GetBoardHistoryByIDMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetBoardHistoryByIDMethodResponder(resp *http.Response) (result BoardHistoryModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusBadRequest,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetBoardsByFilterMethod sends the get boards by filter request.
        // Parameters:
            // model - the model.
    func (client BaseClient) GetBoardsByFilterMethod(ctx context.Context, model *BoardFilterModelType) (result ListBoardModelType, err error) {
        req, err := client.GetBoardsByFilterMethodPreparer(ctx, model)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardsByFilterMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetBoardsByFilterMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardsByFilterMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetBoardsByFilterMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetBoardsByFilterMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetBoardsByFilterMethodPreparer prepares the GetBoardsByFilterMethod request.
        func (client BaseClient) GetBoardsByFilterMethodPreparer(ctx context.Context, model *BoardFilterModelType) (*http.Request, error) {
        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPath("/v1/Board/search"))
        if model != nil {
            preparer = autorest.DecoratePreparer(preparer,
                                autorest.WithJSON(model))
        }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetBoardsByFilterMethodSender sends the GetBoardsByFilterMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetBoardsByFilterMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetBoardsByFilterMethodResponder handles the response to the GetBoardsByFilterMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetBoardsByFilterMethodResponder(resp *http.Response) (result ListBoardModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetSwitchesByBoardIDMethod sends the get switches by board id request.
        // Parameters:
            // boardID - the board identifier.
    func (client BaseClient) GetSwitchesByBoardIDMethod(ctx context.Context, boardID int32) (result ListSwitchModelType, err error) {
        req, err := client.GetSwitchesByBoardIDMethodPreparer(ctx, boardID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchesByBoardIDMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetSwitchesByBoardIDMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchesByBoardIDMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetSwitchesByBoardIDMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchesByBoardIDMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetSwitchesByBoardIDMethodPreparer prepares the GetSwitchesByBoardIDMethod request.
        func (client BaseClient) GetSwitchesByBoardIDMethodPreparer(ctx context.Context, boardID int32) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSwitchesByBoardIDMethodSender sends the GetSwitchesByBoardIDMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSwitchesByBoardIDMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetSwitchesByBoardIDMethodResponder handles the response to the GetSwitchesByBoardIDMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetSwitchesByBoardIDMethodResponder(resp *http.Response) (result ListSwitchModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetSwitchesByFilterMethod sends the get switches by filter request.
        // Parameters:
            // boardID - the board identifier.
            // model - the model.
    func (client BaseClient) GetSwitchesByFilterMethod(ctx context.Context, boardID int32, model *SwitchFilterModelType) (result ListSwitchModelType, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: model,
         Constraints: []validation.Constraint{	{Target: "model", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.Name", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.Name", Name: validation.MaxLength, Rule: 50, Chain: nil },
        	{Target: "model.Name", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "model.ValueType", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.ValueType", Name: validation.MaxLength, Rule: 50, Chain: nil },
        	{Target: "model.ValueType", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        }}}}}); err != nil {
        return result, validation.NewError(".BaseClient", "GetSwitchesByFilterMethod", err.Error())
        }

            req, err := client.GetSwitchesByFilterMethodPreparer(ctx, boardID, model)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchesByFilterMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetSwitchesByFilterMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchesByFilterMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetSwitchesByFilterMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchesByFilterMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetSwitchesByFilterMethodPreparer prepares the GetSwitchesByFilterMethod request.
        func (client BaseClient) GetSwitchesByFilterMethodPreparer(ctx context.Context, boardID int32, model *SwitchFilterModelType) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPost(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch/search",pathParameters))
        if model != nil {
            preparer = autorest.DecoratePreparer(preparer,
                                autorest.WithJSON(model))
        }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSwitchesByFilterMethodSender sends the GetSwitchesByFilterMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSwitchesByFilterMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetSwitchesByFilterMethodResponder handles the response to the GetSwitchesByFilterMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetSwitchesByFilterMethodResponder(resp *http.Response) (result ListSwitchModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusForbidden),
            autorest.ByUnmarshallingJSON(&result.Value),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetSwitchHistoryMethod sends the get switch history request.
        // Parameters:
            // ID - the identifier.
    func (client BaseClient) GetSwitchHistoryMethod(ctx context.Context, ID int32, boardID string) (result SwitchHistoryModelType, err error) {
        req, err := client.GetSwitchHistoryMethodPreparer(ctx, ID, boardID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchHistoryMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetSwitchHistoryMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchHistoryMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetSwitchHistoryMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchHistoryMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetSwitchHistoryMethodPreparer prepares the GetSwitchHistoryMethod request.
        func (client BaseClient) GetSwitchHistoryMethodPreparer(ctx context.Context, ID int32, boardID string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch/History/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSwitchHistoryMethodSender sends the GetSwitchHistoryMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSwitchHistoryMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetSwitchHistoryMethodResponder handles the response to the GetSwitchHistoryMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetSwitchHistoryMethodResponder(resp *http.Response) (result SwitchHistoryModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // GetSwitchMethod sends the get switch request.
        // Parameters:
            // ID - the identifier.
    func (client BaseClient) GetSwitchMethod(ctx context.Context, ID int32, boardID string) (result SwitchModelType, err error) {
        req, err := client.GetSwitchMethodPreparer(ctx, ID, boardID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.GetSwitchMethodSender(req)
            if err != nil {
            result.Response = autorest.Response{Response: resp}
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchMethod", resp, "Failure sending request")
            return
            }

            result, err = client.GetSwitchMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "GetSwitchMethod", resp, "Failure responding to request")
            }

        return
        }

        // GetSwitchMethodPreparer prepares the GetSwitchMethod request.
        func (client BaseClient) GetSwitchMethodPreparer(ctx context.Context, ID int32, boardID string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsGet(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch/{id}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // GetSwitchMethodSender sends the GetSwitchMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) GetSwitchMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // GetSwitchMethodResponder handles the response to the GetSwitchMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) GetSwitchMethodResponder(resp *http.Response) (result SwitchModelType, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByUnmarshallingJSON(&result),
            autorest.ByClosing())
            result.Response = autorest.Response{Response: resp}
                return
        }

    // RollbackSwitchMethod sends the rollback switch request.
        // Parameters:
            // switchID - the switch identifier.
            // switchHistoryID - the switch history identifier.
    func (client BaseClient) RollbackSwitchMethod(ctx context.Context, switchID int32, switchHistoryID int32, boardID string) (result autorest.Response, err error) {
        req, err := client.RollbackSwitchMethodPreparer(ctx, switchID, switchHistoryID, boardID)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "RollbackSwitchMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.RollbackSwitchMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "RollbackSwitchMethod", resp, "Failure sending request")
            return
            }

            result, err = client.RollbackSwitchMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "RollbackSwitchMethod", resp, "Failure responding to request")
            }

        return
        }

        // RollbackSwitchMethodPreparer prepares the RollbackSwitchMethod request.
        func (client BaseClient) RollbackSwitchMethodPreparer(ctx context.Context, switchID int32, switchHistoryID int32, boardID string) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            "switchHistoryId": autorest.Encode("path",switchHistoryID),
            "switchId": autorest.Encode("path",switchID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsPut(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch/{switchId}/history/{switchHistoryId}",pathParameters))
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // RollbackSwitchMethodSender sends the RollbackSwitchMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) RollbackSwitchMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // RollbackSwitchMethodResponder handles the response to the RollbackSwitchMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) RollbackSwitchMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // UpdateBoardMethod sends the update board request.
        // Parameters:
            // ID - the identifier.
            // model - the model.
    func (client BaseClient) UpdateBoardMethod(ctx context.Context, ID int32, model *BoardPutModelType) (result autorest.Response, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: model,
         Constraints: []validation.Constraint{	{Target: "model", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.Name", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.Name", Name: validation.MaxLength, Rule: 50, Chain: nil },
        	{Target: "model.Name", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "model.Description", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "model.Description", Name: validation.MaxLength, Rule: 250, Chain: nil },
        	{Target: "model.Description", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        }}}}}); err != nil {
        return result, validation.NewError(".BaseClient", "UpdateBoardMethod", err.Error())
        }

            req, err := client.UpdateBoardMethodPreparer(ctx, ID, model)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateBoardMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.UpdateBoardMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateBoardMethod", resp, "Failure sending request")
            return
            }

            result, err = client.UpdateBoardMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateBoardMethod", resp, "Failure responding to request")
            }

        return
        }

        // UpdateBoardMethodPreparer prepares the UpdateBoardMethod request.
        func (client BaseClient) UpdateBoardMethodPreparer(ctx context.Context, ID int32, model *BoardPutModelType) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPut(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{id}",pathParameters))
        if model != nil {
            preparer = autorest.DecoratePreparer(preparer,
                                autorest.WithJSON(model))
        }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UpdateBoardMethodSender sends the UpdateBoardMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UpdateBoardMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // UpdateBoardMethodResponder handles the response to the UpdateBoardMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) UpdateBoardMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusBadRequest,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByClosing())
            result.Response = resp
                return
        }

    // UpdateSwitchMethod sends the update switch request.
        // Parameters:
            // ID - the identifier.
            // switchPutModel - the switch model.
    func (client BaseClient) UpdateSwitchMethod(ctx context.Context, ID int32, boardID string, switchPutModel *SwitchPutModelType) (result autorest.Response, err error) {
        if err := validation.Validate([]validation.Validation{
        { TargetValue: switchPutModel,
         Constraints: []validation.Constraint{	{Target: "switchPutModel", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPutModel.Name", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPutModel.Name", Name: validation.MaxLength, Rule: 50, Chain: nil },
        	{Target: "switchPutModel.Name", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "switchPutModel.Description", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPutModel.Description", Name: validation.MaxLength, Rule: 250, Chain: nil },
        	{Target: "switchPutModel.Description", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "switchPutModel.Comment", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPutModel.Comment", Name: validation.MaxLength, Rule: 250, Chain: nil },
        	{Target: "switchPutModel.Comment", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        	{Target: "switchPutModel.ValueType", Name: validation.Null, Rule: false ,
        Chain: []validation.Constraint{	{Target: "switchPutModel.ValueType", Name: validation.MaxLength, Rule: 10, Chain: nil },
        	{Target: "switchPutModel.ValueType", Name: validation.MinLength, Rule: 0, Chain: nil },
        }},
        }}}}}); err != nil {
        return result, validation.NewError(".BaseClient", "UpdateSwitchMethod", err.Error())
        }

            req, err := client.UpdateSwitchMethodPreparer(ctx, ID, boardID, switchPutModel)
        if err != nil {
        err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateSwitchMethod", nil , "Failure preparing request")
        return
        }

            resp, err := client.UpdateSwitchMethodSender(req)
            if err != nil {
            result.Response = resp
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateSwitchMethod", resp, "Failure sending request")
            return
            }

            result, err = client.UpdateSwitchMethodResponder(resp)
            if err != nil {
            err = autorest.NewErrorWithError(err, ".BaseClient", "UpdateSwitchMethod", resp, "Failure responding to request")
            }

        return
        }

        // UpdateSwitchMethodPreparer prepares the UpdateSwitchMethod request.
        func (client BaseClient) UpdateSwitchMethodPreparer(ctx context.Context, ID int32, boardID string, switchPutModel *SwitchPutModelType) (*http.Request, error) {
            pathParameters := map[string]interface{} {
            "boardId": autorest.Encode("path",boardID),
            "id": autorest.Encode("path",ID),
            }

        preparer := autorest.CreatePreparer(
        autorest.AsContentType("application/json-patch+json; charset=utf-8"),
        autorest.AsPut(),
        autorest.WithBaseURL(client.BaseURI),
        autorest.WithPathParameters("/v1/Board/{boardId}/Switch/{id}",pathParameters))
        if switchPutModel != nil {
            preparer = autorest.DecoratePreparer(preparer,
                                autorest.WithJSON(switchPutModel))
        }
        return preparer.Prepare((&http.Request{}).WithContext(ctx))
        }

        // UpdateSwitchMethodSender sends the UpdateSwitchMethod request. The method will close the
        // http.Response Body if it receives an error.
        func (client BaseClient) UpdateSwitchMethodSender(req *http.Request) (*http.Response, error) {
            return autorest.SendWithSender(client, req,
            autorest.DoRetryForStatusCodes(client.RetryAttempts, client.RetryDuration, autorest.StatusCodesForRetry...))
                }

        // UpdateSwitchMethodResponder handles the response to the UpdateSwitchMethod request. The method always
        // closes the http.Response Body.
        func (client BaseClient) UpdateSwitchMethodResponder(resp *http.Response) (result autorest.Response, err error) {
            err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK,http.StatusNoContent,http.StatusUnauthorized,http.StatusForbidden,http.StatusNotFound),
            autorest.ByClosing())
            result.Response = resp
                return
        }

