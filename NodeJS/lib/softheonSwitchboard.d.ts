/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from "./models";

export default class SoftheonSwitchboard extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the SoftheonSwitchboard class.
   * @constructor
   *
   * @param {string} [baseUri] - The base URI of the service.
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(baseUri?: string, options?: ServiceClientOptions);


  /**
   * @summary Gets a board by the board id.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BoardModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getBoardByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BoardModel>>;

  /**
   * @summary Gets a board by the board id.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BoardModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BoardModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BoardModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getBoardById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BoardModel>;
  getBoardById(id: number, callback: ServiceCallback<models.BoardModel>): void;
  getBoardById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BoardModel>): void;


  /**
   * @summary Puts the specified model.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.model] The model.
   *
   * @param {string} [options.model.name] Gets or sets the name.
   *
   * @param {string} [options.model.description] Gets or sets the description.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateBoardWithHttpOperationResponse(id: number, options?: { model? : models.BoardPutModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Puts the specified model.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.model] The model.
   *
   * @param {string} [options.model.name] Gets or sets the name.
   *
   * @param {string} [options.model.description] Gets or sets the description.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateBoard(id: number, options?: { model? : models.BoardPutModel, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateBoard(id: number, callback: ServiceCallback<void>): void;
  updateBoard(id: number, options: { model? : models.BoardPutModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Deletes the specified identifier.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteBoardWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Deletes the specified identifier.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteBoard(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteBoard(id: number, callback: ServiceCallback<void>): void;
  deleteBoard(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Gets all boards.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllBoardsWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BoardModel[]>>;

  /**
   * @summary Gets all boards.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllBoards(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BoardModel[]>;
  getAllBoards(callback: ServiceCallback<models.BoardModel[]>): void;
  getAllBoards(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BoardModel[]>): void;


  /**
   * @summary Posts the specified model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.model] The model.
   *
   * @param {string} [options.model.name] Gets or sets the name.
   *
   * @param {string} [options.model.description] Gets or sets the description.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BoardModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createBoardWithHttpOperationResponse(options?: { model? : models.BoardPostModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BoardModel>>;

  /**
   * @summary Posts the specified model.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.model] The model.
   *
   * @param {string} [options.model.name] Gets or sets the name.
   *
   * @param {string} [options.model.description] Gets or sets the description.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BoardModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BoardModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BoardModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createBoard(options?: { model? : models.BoardPostModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.BoardModel>;
  createBoard(callback: ServiceCallback<models.BoardModel>): void;
  createBoard(options: { model? : models.BoardPostModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BoardModel>): void;


  /**
   * @summary Gets all board history for account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllBoardHistoryForTheAccountWithHttpOperationResponse(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BoardHistoryModel[]>>;

  /**
   * @summary Gets all board history for account.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllBoardHistoryForTheAccount(options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BoardHistoryModel[]>;
  getAllBoardHistoryForTheAccount(callback: ServiceCallback<models.BoardHistoryModel[]>): void;
  getAllBoardHistoryForTheAccount(options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BoardHistoryModel[]>): void;


  /**
   * @summary Gets the board history.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<BoardHistoryModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getBoardHistoryByIdWithHttpOperationResponse(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BoardHistoryModel>>;

  /**
   * @summary Gets the board history.
   *
   * @param {number} id The identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {BoardHistoryModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {BoardHistoryModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link BoardHistoryModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getBoardHistoryById(id: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.BoardHistoryModel>;
  getBoardHistoryById(id: number, callback: ServiceCallback<models.BoardHistoryModel>): void;
  getBoardHistoryById(id: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BoardHistoryModel>): void;


  /**
   * @summary Gets the boards by filter.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.model] The model.
   *
   * @param {string} [options.model.name] Gets or sets the name.
   *
   * @param {date} [options.model.createdDate] Gets or sets the created date.
   *
   * @param {date} [options.model.modifiedDate] Gets or sets the modified date.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getBoardsByFilterWithHttpOperationResponse(options?: { model? : models.BoardFilterModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.BoardModel[]>>;

  /**
   * @summary Gets the boards by filter.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.model] The model.
   *
   * @param {string} [options.model.name] Gets or sets the name.
   *
   * @param {date} [options.model.createdDate] Gets or sets the created date.
   *
   * @param {date} [options.model.modifiedDate] Gets or sets the modified date.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getBoardsByFilter(options?: { model? : models.BoardFilterModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.BoardModel[]>;
  getBoardsByFilter(callback: ServiceCallback<models.BoardModel[]>): void;
  getBoardsByFilter(options: { model? : models.BoardFilterModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.BoardModel[]>): void;


  /**
   * @summary Gets all switches associated with a specific board Id.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSwitchesByBoardIdWithHttpOperationResponse(boardId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwitchModel[]>>;

  /**
   * @summary Gets all switches associated with a specific board Id.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSwitchesByBoardId(boardId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwitchModel[]>;
  getSwitchesByBoardId(boardId: number, callback: ServiceCallback<models.SwitchModel[]>): void;
  getSwitchesByBoardId(boardId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwitchModel[]>): void;


  /**
   * @summary Creates a new switch.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.switchPostModel] The switch model.
   *
   * @param {string} [options.switchPostModel.name] Gets or sets the name.
   *
   * @param {string} [options.switchPostModel.description] Gets or sets the
   * description.
   *
   * @param {string} [options.switchPostModel.comment] Gets or sets the comment.
   *
   * @param {string} [options.switchPostModel.value] Gets or sets the value.
   *
   * @param {string} [options.switchPostModel.valueType] Gets or sets the type of
   * the value.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SwitchModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  createSwitchWithHttpOperationResponse(boardId: number, options?: { switchPostModel? : models.SwitchPostModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwitchModel>>;

  /**
   * @summary Creates a new switch.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.switchPostModel] The switch model.
   *
   * @param {string} [options.switchPostModel.name] Gets or sets the name.
   *
   * @param {string} [options.switchPostModel.description] Gets or sets the
   * description.
   *
   * @param {string} [options.switchPostModel.comment] Gets or sets the comment.
   *
   * @param {string} [options.switchPostModel.value] Gets or sets the value.
   *
   * @param {string} [options.switchPostModel.valueType] Gets or sets the type of
   * the value.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SwitchModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SwitchModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SwitchModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  createSwitch(boardId: number, options?: { switchPostModel? : models.SwitchPostModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.SwitchModel>;
  createSwitch(boardId: number, callback: ServiceCallback<models.SwitchModel>): void;
  createSwitch(boardId: number, options: { switchPostModel? : models.SwitchPostModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwitchModel>): void;


  /**
   * @summary Gets a specific switch by the switch Id.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SwitchModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSwitchWithHttpOperationResponse(id: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwitchModel>>;

  /**
   * @summary Gets a specific switch by the switch Id.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SwitchModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SwitchModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SwitchModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSwitch(id: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwitchModel>;
  getSwitch(id: number, boardId: string, callback: ServiceCallback<models.SwitchModel>): void;
  getSwitch(id: number, boardId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwitchModel>): void;


  /**
   * @summary Updates the switch and places the old version in the history table.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.switchPutModel] The switch model.
   *
   * @param {string} [options.switchPutModel.name] Gets or sets the name.
   *
   * @param {string} [options.switchPutModel.description] Gets or sets the
   * description.
   *
   * @param {string} [options.switchPutModel.comment] Gets or sets the comment.
   *
   * @param {string} [options.switchPutModel.value] Gets or sets the value.
   *
   * @param {string} [options.switchPutModel.valueType] Gets or sets the type of
   * the value.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  updateSwitchWithHttpOperationResponse(id: number, boardId: string, options?: { switchPutModel? : models.SwitchPutModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Updates the switch and places the old version in the history table.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.switchPutModel] The switch model.
   *
   * @param {string} [options.switchPutModel.name] Gets or sets the name.
   *
   * @param {string} [options.switchPutModel.description] Gets or sets the
   * description.
   *
   * @param {string} [options.switchPutModel.comment] Gets or sets the comment.
   *
   * @param {string} [options.switchPutModel.value] Gets or sets the value.
   *
   * @param {string} [options.switchPutModel.valueType] Gets or sets the type of
   * the value.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  updateSwitch(id: number, boardId: string, options?: { switchPutModel? : models.SwitchPutModel, customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  updateSwitch(id: number, boardId: string, callback: ServiceCallback<void>): void;
  updateSwitch(id: number, boardId: string, options: { switchPutModel? : models.SwitchPutModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Deletes a switch and place it in the history table.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  deleteSwitchVersionWithHttpOperationResponse(id: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Deletes a switch and place it in the history table.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  deleteSwitchVersion(id: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  deleteSwitchVersion(id: number, boardId: string, callback: ServiceCallback<void>): void;
  deleteSwitchVersion(id: number, boardId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;


  /**
   * @summary Gets a specific previous switch version.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<SwitchHistoryModel>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSwitchHistoryWithHttpOperationResponse(id: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwitchHistoryModel>>;

  /**
   * @summary Gets a specific previous switch version.
   *
   * @param {number} id The identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {SwitchHistoryModel} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {SwitchHistoryModel} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link SwitchHistoryModel} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSwitchHistory(id: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwitchHistoryModel>;
  getSwitchHistory(id: number, boardId: string, callback: ServiceCallback<models.SwitchHistoryModel>): void;
  getSwitchHistory(id: number, boardId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwitchHistoryModel>): void;


  /**
   * @summary Gets all of the previous switches for a board.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllSwitchHistoryByBoardWithHttpOperationResponse(boardId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwitchHistoryModel[]>>;

  /**
   * @summary Gets all of the previous switches for a board.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllSwitchHistoryByBoard(boardId: number, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwitchHistoryModel[]>;
  getAllSwitchHistoryByBoard(boardId: number, callback: ServiceCallback<models.SwitchHistoryModel[]>): void;
  getAllSwitchHistoryByBoard(boardId: number, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwitchHistoryModel[]>): void;


  /**
   * @summary Gets all of the previous switches for a switch.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getAllSwitchHistoryBySwitchWithHttpOperationResponse(switchId: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwitchHistoryModel[]>>;

  /**
   * @summary Gets all of the previous switches for a switch.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getAllSwitchHistoryBySwitch(switchId: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<models.SwitchHistoryModel[]>;
  getAllSwitchHistoryBySwitch(switchId: number, boardId: string, callback: ServiceCallback<models.SwitchHistoryModel[]>): void;
  getAllSwitchHistoryBySwitch(switchId: number, boardId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwitchHistoryModel[]>): void;


  /**
   * @summary Gets the users by filter.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.model] The model.
   *
   * @param {string} [options.model.name] Gets or sets the name.
   *
   * @param {string} [options.model.valueType] Gets or sets the type of the
   * value.
   *
   * @param {date} [options.model.createdDate] Gets or sets the created date.
   *
   * @param {date} [options.model.modifiedDate] Gets or sets the modified date.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<Array>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  getSwitchesByFilterWithHttpOperationResponse(boardId: number, options?: { model? : models.SwitchFilterModel, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.SwitchModel[]>>;

  /**
   * @summary Gets the users by filter.
   *
   * @param {number} boardId The board identifier.
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.model] The model.
   *
   * @param {string} [options.model.name] Gets or sets the name.
   *
   * @param {string} [options.model.valueType] Gets or sets the type of the
   * value.
   *
   * @param {date} [options.model.createdDate] Gets or sets the created date.
   *
   * @param {date} [options.model.modifiedDate] Gets or sets the modified date.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {Array} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {Array} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  getSwitchesByFilter(boardId: number, options?: { model? : models.SwitchFilterModel, customHeaders? : { [headerName: string]: string; } }): Promise<models.SwitchModel[]>;
  getSwitchesByFilter(boardId: number, callback: ServiceCallback<models.SwitchModel[]>): void;
  getSwitchesByFilter(boardId: number, options: { model? : models.SwitchFilterModel, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.SwitchModel[]>): void;


  /**
   * @summary Rollback to a previous switch.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {number} switchHistoryId The switch history identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<null>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  rollbackSwitchWithHttpOperationResponse(switchId: number, switchHistoryId: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<void>>;

  /**
   * @summary Rollback to a previous switch.
   *
   * @param {number} switchId The switch identifier.
   *
   * @param {number} switchHistoryId The switch history identifier.
   *
   * @param {string} boardId
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {null} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {null} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  rollbackSwitch(switchId: number, switchHistoryId: number, boardId: string, options?: { customHeaders? : { [headerName: string]: string; } }): Promise<void>;
  rollbackSwitch(switchId: number, switchHistoryId: number, boardId: string, callback: ServiceCallback<void>): void;
  rollbackSwitch(switchId: number, switchHistoryId: number, boardId: string, options: { customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<void>): void;
}

export { SoftheonSwitchboard, models as SoftheonSwitchboardModels };
