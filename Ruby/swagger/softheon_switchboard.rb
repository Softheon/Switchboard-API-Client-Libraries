# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module Swagger
  #
  # A service client - single point of access to the REST API.
  #
  class SoftheonSwitchboard < MsRest::ServiceClient
    include MsRest::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    #
    # Creates initializes a new instance of the SoftheonSwitchboard class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'http://localhost'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRest::HttpOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url
      if(!options[:headers].nil? && !options[:headers]['Content-Type'].nil?)
        @request_headers['Content-Type'] = options[:headers]['Content-Type']
      end

      request_headers = @request_headers
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Gets a board by the board id.
    #
    # @param id [Integer] The identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BoardModel] operation results.
    #
    def get_board_by_id(id, custom_headers:nil)
      response = get_board_by_id_async(id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets a board by the board id.
    #
    # @param id [Integer] The identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_board_by_id_with_http_info(id, custom_headers:nil)
      get_board_by_id_async(id, custom_headers:custom_headers).value!
    end

    #
    # Gets a board by the board id.
    #
    # @param id [Integer] The identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_board_by_id_async(id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Swagger::Models::BoardModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Puts the specified model.
    #
    # @param id [Integer] The identifier.
    # @param model [BoardPutModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update_board(id, model:nil, custom_headers:nil)
      response = update_board_async(id, model:model, custom_headers:custom_headers).value!
      nil
    end

    #
    # Puts the specified model.
    #
    # @param id [Integer] The identifier.
    # @param model [BoardPutModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_board_with_http_info(id, model:nil, custom_headers:nil)
      update_board_async(id, model:model, custom_headers:custom_headers).value!
    end

    #
    # Puts the specified model.
    #
    # @param id [Integer] The identifier.
    # @param model [BoardPutModel] The model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_board_async(id, model:nil, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::BoardPutModel.mapper()
      request_content = self.serialize(request_mapper,  model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/Board/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204 || status_code == 400 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Deletes the specified identifier.
    #
    # @param id [Integer] The identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete_board(id, custom_headers:nil)
      response = delete_board_async(id, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes the specified identifier.
    #
    # @param id [Integer] The identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete_board_with_http_info(id, custom_headers:nil)
      delete_board_async(id, custom_headers:custom_headers).value!
    end

    #
    # Deletes the specified identifier.
    #
    # @param id [Integer] The identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_board_async(id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204 || status_code == 400 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Gets all boards.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_all_boards(custom_headers:nil)
      response = get_all_boards_async(custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all boards.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_all_boards_with_http_info(custom_headers:nil)
      get_all_boards_async(custom_headers:custom_headers).value!
    end

    #
    # Gets all boards.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_all_boards_async(custom_headers:nil)


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'BoardModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'BoardModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Posts the specified model.
    #
    # @param model [BoardPostModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BoardModel] operation results.
    #
    def create_board(model:nil, custom_headers:nil)
      response = create_board_async(model:model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Posts the specified model.
    #
    # @param model [BoardPostModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_board_with_http_info(model:nil, custom_headers:nil)
      create_board_async(model:model, custom_headers:custom_headers).value!
    end

    #
    # Posts the specified model.
    #
    # @param model [BoardPostModel] The model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_board_async(model:nil, custom_headers:nil)


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::BoardPostModel.mapper()
      request_content = self.serialize(request_mapper,  model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/Board'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201 || status_code == 400 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Swagger::Models::BoardModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all board history for account.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_all_board_history_for_the_account(custom_headers:nil)
      response = get_all_board_history_for_the_account_async(custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all board history for account.
    #
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_all_board_history_for_the_account_with_http_info(custom_headers:nil)
      get_all_board_history_for_the_account_async(custom_headers:custom_headers).value!
    end

    #
    # Gets all board history for account.
    #
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_all_board_history_for_the_account_async(custom_headers:nil)


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/History'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'BoardHistoryModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'BoardHistoryModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the board history.
    #
    # @param id [Integer] The identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [BoardHistoryModel] operation results.
    #
    def get_board_history_by_id(id, custom_headers:nil)
      response = get_board_history_by_id_async(id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the board history.
    #
    # @param id [Integer] The identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_board_history_by_id_with_http_info(id, custom_headers:nil)
      get_board_history_by_id_async(id, custom_headers:custom_headers).value!
    end

    #
    # Gets the board history.
    #
    # @param id [Integer] The identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_board_history_by_id_async(id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/History/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 400 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Swagger::Models::BoardHistoryModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the boards by filter.
    #
    # @param model [BoardFilterModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_boards_by_filter(model:nil, custom_headers:nil)
      response = get_boards_by_filter_async(model:model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the boards by filter.
    #
    # @param model [BoardFilterModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_boards_by_filter_with_http_info(model:nil, custom_headers:nil)
      get_boards_by_filter_async(model:model, custom_headers:custom_headers).value!
    end

    #
    # Gets the boards by filter.
    #
    # @param model [BoardFilterModel] The model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_boards_by_filter_async(model:nil, custom_headers:nil)


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::BoardFilterModel.mapper()
      request_content = self.serialize(request_mapper,  model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/Board/search'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'BoardModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'BoardModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all switches associated with a specific board Id.
    #
    # @param board_id [Integer] The board identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_switches_by_board_id(board_id, custom_headers:nil)
      response = get_switches_by_board_id_async(board_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all switches associated with a specific board Id.
    #
    # @param board_id [Integer] The board identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_switches_by_board_id_with_http_info(board_id, custom_headers:nil)
      get_switches_by_board_id_async(board_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all switches associated with a specific board Id.
    #
    # @param board_id [Integer] The board identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_switches_by_board_id_async(board_id, custom_headers:nil)
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{boardId}/Switch'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'boardId' => board_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'SwitchModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'SwitchModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Creates a new switch.
    #
    # @param board_id [Integer] The board identifier.
    # @param switch_post_model [SwitchPostModel] The switch model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SwitchModel] operation results.
    #
    def create_switch(board_id, switch_post_model:nil, custom_headers:nil)
      response = create_switch_async(board_id, switch_post_model:switch_post_model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Creates a new switch.
    #
    # @param board_id [Integer] The board identifier.
    # @param switch_post_model [SwitchPostModel] The switch model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def create_switch_with_http_info(board_id, switch_post_model:nil, custom_headers:nil)
      create_switch_async(board_id, switch_post_model:switch_post_model, custom_headers:custom_headers).value!
    end

    #
    # Creates a new switch.
    #
    # @param board_id [Integer] The board identifier.
    # @param switch_post_model [SwitchPostModel] The switch model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def create_switch_async(board_id, switch_post_model:nil, custom_headers:nil)
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::SwitchPostModel.mapper()
      request_content = self.serialize(request_mapper,  switch_post_model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/Board/{boardId}/Switch'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'boardId' => board_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 201 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 201
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Swagger::Models::SwitchModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets a specific switch by the switch Id.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SwitchModel] operation results.
    #
    def get_switch(id, board_id, custom_headers:nil)
      response = get_switch_async(id, board_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets a specific switch by the switch Id.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_switch_with_http_info(id, board_id, custom_headers:nil)
      get_switch_async(id, board_id, custom_headers:custom_headers).value!
    end

    #
    # Gets a specific switch by the switch Id.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_switch_async(id, board_id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{boardId}/Switch/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id,'boardId' => board_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Swagger::Models::SwitchModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Updates the switch and places the old version in the history table.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param switch_put_model [SwitchPutModel] The switch model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def update_switch(id, board_id, switch_put_model:nil, custom_headers:nil)
      response = update_switch_async(id, board_id, switch_put_model:switch_put_model, custom_headers:custom_headers).value!
      nil
    end

    #
    # Updates the switch and places the old version in the history table.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param switch_put_model [SwitchPutModel] The switch model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def update_switch_with_http_info(id, board_id, switch_put_model:nil, custom_headers:nil)
      update_switch_async(id, board_id, switch_put_model:switch_put_model, custom_headers:custom_headers).value!
    end

    #
    # Updates the switch and places the old version in the history table.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param switch_put_model [SwitchPutModel] The switch model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def update_switch_async(id, board_id, switch_put_model:nil, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::SwitchPutModel.mapper()
      request_content = self.serialize(request_mapper,  switch_put_model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/Board/{boardId}/Switch/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id,'boardId' => board_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Deletes a switch and place it in the history table.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def delete_switch_version(id, board_id, custom_headers:nil)
      response = delete_switch_version_async(id, board_id, custom_headers:custom_headers).value!
      nil
    end

    #
    # Deletes a switch and place it in the history table.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def delete_switch_version_with_http_info(id, board_id, custom_headers:nil)
      delete_switch_version_async(id, board_id, custom_headers:custom_headers).value!
    end

    #
    # Deletes a switch and place it in the history table.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def delete_switch_version_async(id, board_id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{boardId}/Switch/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id,'boardId' => board_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:delete, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Gets a specific previous switch version.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [SwitchHistoryModel] operation results.
    #
    def get_switch_history(id, board_id, custom_headers:nil)
      response = get_switch_history_async(id, board_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets a specific previous switch version.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_switch_history_with_http_info(id, board_id, custom_headers:nil)
      get_switch_history_async(id, board_id, custom_headers:custom_headers).value!
    end

    #
    # Gets a specific previous switch version.
    #
    # @param id [Integer] The identifier.
    # @param board_id [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_switch_history_async(id, board_id, custom_headers:nil)
      fail ArgumentError, 'id is nil' if id.nil?
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{boardId}/Switch/History/{id}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'id' => id,'boardId' => board_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = Swagger::Models::SwitchHistoryModel.mapper()
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all of the previous switches for a board.
    #
    # @param board_id [Integer] The board identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_all_switch_history_by_board(board_id, custom_headers:nil)
      response = get_all_switch_history_by_board_async(board_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all of the previous switches for a board.
    #
    # @param board_id [Integer] The board identifier.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_all_switch_history_by_board_with_http_info(board_id, custom_headers:nil)
      get_all_switch_history_by_board_async(board_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all of the previous switches for a board.
    #
    # @param board_id [Integer] The board identifier.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_all_switch_history_by_board_async(board_id, custom_headers:nil)
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{boardId}/Switch/History'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'boardId' => board_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'SwitchHistoryModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'SwitchHistoryModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets all of the previous switches for a switch.
    #
    # @param switch_id [Integer] The switch identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_all_switch_history_by_switch(switch_id, board_id, custom_headers:nil)
      response = get_all_switch_history_by_switch_async(switch_id, board_id, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets all of the previous switches for a switch.
    #
    # @param switch_id [Integer] The switch identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_all_switch_history_by_switch_with_http_info(switch_id, board_id, custom_headers:nil)
      get_all_switch_history_by_switch_async(switch_id, board_id, custom_headers:custom_headers).value!
    end

    #
    # Gets all of the previous switches for a switch.
    #
    # @param switch_id [Integer] The switch identifier.
    # @param board_id [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_all_switch_history_by_switch_async(switch_id, board_id, custom_headers:nil)
      fail ArgumentError, 'switch_id is nil' if switch_id.nil?
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{boardId}/Switch/{switchId}/History'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'switchId' => switch_id,'boardId' => board_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'SwitchHistoryModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'SwitchHistoryModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Gets the users by filter.
    #
    # @param board_id [Integer] The board identifier.
    # @param model [SwitchFilterModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [Array] operation results.
    #
    def get_switches_by_filter(board_id, model:nil, custom_headers:nil)
      response = get_switches_by_filter_async(board_id, model:model, custom_headers:custom_headers).value!
      response.body unless response.nil?
    end

    #
    # Gets the users by filter.
    #
    # @param board_id [Integer] The board identifier.
    # @param model [SwitchFilterModel] The model.
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def get_switches_by_filter_with_http_info(board_id, model:nil, custom_headers:nil)
      get_switches_by_filter_async(board_id, model:model, custom_headers:custom_headers).value!
    end

    #
    # Gets the users by filter.
    #
    # @param board_id [Integer] The board identifier.
    # @param model [SwitchFilterModel] The model.
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def get_switches_by_filter_async(board_id, model:nil, custom_headers:nil)
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json-patch+json; charset=utf-8'

      # Serialize Request
      request_mapper = Swagger::Models::SwitchFilterModel.mapper()
      request_content = self.serialize(request_mapper,  model)
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'v1/Board/{boardId}/Switch/search'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'boardId' => board_id},
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 200 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end

        # Deserialize Response
        if status_code == 200
          begin
            parsed_response = response_content.to_s.empty? ? nil : JSON.load(response_content)
            result_mapper = {
              client_side_validation: true,
              required: false,
              serialized_name: 'parsed_response',
              type: {
                name: 'Sequence',
                element: {
                    client_side_validation: true,
                    required: false,
                    serialized_name: 'SwitchModelElementType',
                    type: {
                      name: 'Composite',
                      class_name: 'SwitchModel'
                    }
                }
              }
            }
            result.body = self.deserialize(result_mapper, parsed_response)
          rescue Exception => e
            fail MsRest::DeserializationError.new('Error occurred in deserializing the response', e.message, e.backtrace, result)
          end
        end

        result
      end

      promise.execute
    end

    #
    # Rollback to a previous switch.
    #
    # @param switch_id [Integer] The switch identifier.
    # @param switch_history_id [Integer] The switch history identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def rollback_switch(switch_id, switch_history_id, board_id, custom_headers:nil)
      response = rollback_switch_async(switch_id, switch_history_id, board_id, custom_headers:custom_headers).value!
      nil
    end

    #
    # Rollback to a previous switch.
    #
    # @param switch_id [Integer] The switch identifier.
    # @param switch_history_id [Integer] The switch history identifier.
    # @param board_id [String]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def rollback_switch_with_http_info(switch_id, switch_history_id, board_id, custom_headers:nil)
      rollback_switch_async(switch_id, switch_history_id, board_id, custom_headers:custom_headers).value!
    end

    #
    # Rollback to a previous switch.
    #
    # @param switch_id [Integer] The switch identifier.
    # @param switch_history_id [Integer] The switch history identifier.
    # @param board_id [String]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def rollback_switch_async(switch_id, switch_history_id, board_id, custom_headers:nil)
      fail ArgumentError, 'switch_id is nil' if switch_id.nil?
      fail ArgumentError, 'switch_history_id is nil' if switch_history_id.nil?
      fail ArgumentError, 'board_id is nil' if board_id.nil?


      request_headers = {}
      request_headers['Content-Type'] = 'application/json; charset=utf-8'
      path_template = 'v1/Board/{boardId}/Switch/{switchId}/history/{switchHistoryId}'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'switchId' => switch_id,'switchHistoryId' => switch_history_id,'boardId' => board_id},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:put, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code == 204 || status_code == 404 || status_code == 401 || status_code == 403
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'swagger'
        add_user_agent_information(sdk_information)
    end
  end
end
